{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BuildMyApp","text":"<p>The BuildMyApp initiative is here to help you go from begginer to Solution Integrator Master !</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>All the tutorials you may need for becoming a Solution Integration Expert</p> <p> Pre-requisites</p> <p>What do you need before even getting started ? Everything will be listed here :)</p> <p> pre-requisites</p>"},{"location":"tutorials/pre-requisites/","title":"Pre-requisites","text":"<p>First as some tools are required for some elements I recommend you do separate install of those.</p>"},{"location":"tutorials/pre-requisites/#system-preparation","title":"System preparation","text":"<p>To get ready to make your tooling installation folders you can do the following commands.</p> <p>You can also make your own system, but most tutoriels here will suppose you have made the following and that you are using a bash based terminal.</p> <p>How to update your tooling will be added in the installation tutorial of the tools.</p> Set-up tooling folder<pre><code>cd ~\n\nmkdir Tooling\nmkdir ToolingBins\n\necho \"export PATH=~/ToolingBins:$PATH\" &gt;&gt; ~/.bashrc\n</code></pre> <p>Now every tool that you install can be installed in <code>Tooling</code>, and you can add any executable or script you may need over multiple environment in <code>ToolingBins</code></p>"},{"location":"tutorials/pre-requisites/#babylon","title":"Babylon","text":"<p>Babylon is the tool made by our DevOps team to do most of the deployment operations on APIs,  you will need it to update high level configuration of you application. You can find the full installation tutoriel on this page : Babylon</p>"},{"location":"tutorials/pre-requisites/#coal","title":"CoAL","text":"<p>You can find installation instructions on this page: CoAL</p>"},{"location":"tutorials/pre-requisites/#csm-orc","title":"csm-orc","text":"<p>You can find installation instructions on this page: csm-orc</p>"},{"location":"tutorials/pre-requisites/#csmcli","title":"csmcli","text":"<p>You can find installation instructions on this page: csmcli</p>"},{"location":"tutorials/pre-requisites/#cosmotech-sdk","title":"Cosmotech SDK","text":"<p>You can find installation instructions on this page: Cosmotech SDK</p>"},{"location":"tutorials/pre-requisites/#docker","title":"docker","text":"<p>Docker is required for containerized deployments and development environments. A working solution requires a docker image to be built and deployed, you will need this tool for that. You can find the installation tutorial on this page: Docker</p>"},{"location":"tutorials/pre-requisites/#az-cli","title":"az cli","text":"<p>Azure CLI is required for managing Azure resources from the command line. You will be using it mostly to connect to azure image repository to send your solutions there. You can find the installation tutorial on this page: Azure CLI</p>"},{"location":"tutorials/pre-requisites/#npm-node","title":"npm / node","text":"<p>npm and Node.js are required for running JavaScript tools and building web applications, you will need those if you have to do customization of the webapps.</p> <p>You can find the installation tutorial on this page: npm / Node.js</p>"},{"location":"tutorials/pre-requisites/#_1","title":"...","text":""},{"location":"tutorials/pre-requisites/az-cli/","title":"Azure CLI","text":"<p>Azure CLI is required for managing Azure resources from the command line.</p>"},{"location":"tutorials/pre-requisites/az-cli/#install-azure-cli-on-debian","title":"Install Azure CLI on Debian","text":"<p>Install using the official Microsoft repository:</p> Install Azure CLI<pre><code>cd ~/Tooling\n\n# Install dependencies\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg\n\n# Add Microsoft signing key\ncurl -sL https://packages.microsoft.com/keys/microsoft.asc | \\\n  gpg --dearmor | \\\n  sudo tee /etc/apt/keyrings/microsoft.gpg &gt; /dev/null\n\n# Add Azure CLI repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main\" | \\\n  sudo tee /etc/apt/sources.list.d/azure-cli.list\n\nsudo apt-get update\nsudo apt-get install -y azure-cli\n</code></pre>"},{"location":"tutorials/pre-requisites/az-cli/#add-azure-cli-to-toolingbins","title":"Add Azure CLI to ToolingBins","text":"<p>Azure CLI is installed system-wide, but you can add a symlink for convenience:</p> Symlink az<pre><code>cd ~/ToolingBins\nln -s /usr/bin/az az\n</code></pre>"},{"location":"tutorials/pre-requisites/az-cli/#update-azure-cli","title":"Update Azure CLI","text":"<p>To update Azure CLI, run:</p> Update Azure CLI<pre><code>sudo apt-get update\nsudo apt-get install -y azure-cli\n</code></pre>"},{"location":"tutorials/pre-requisites/az-cli/#references","title":"References","text":"<ul> <li>Install Azure CLI (Official Microsoft Docs)</li> <li>Get Started with Azure CLI (Official Microsoft Docs)</li> </ul>"},{"location":"tutorials/pre-requisites/babylon/","title":"Babylon","text":"<p>You will need a working installation of <code>babylon</code> further in the tutorials</p> <p>One easy way to make a portable instalation of it is to execute the following script</p> Portable babylon install<pre><code>cd ~/Tooling\n\ngit clone git@github.com:Cosmo-Tech/Babylon.git Babylon\n\ncd Babylon\ngit checkout 4.2.3\n\npython -m venv .venv\n\nsource .venv/bin/activate\npip install .\ndeactivate\n\ncd ~/ToolingBin\nln -s ~/Tooling/Babylon/.venv/bin/babylon babylon\n</code></pre> <p>And know your <code>babylon</code> installation is ready and will be made available over multiple environments while not interacting with any other dependency you may have</p> Update Babylon<pre><code>cd ~/Tooling/Babylon\ngit fetch -ftpa\ngit checkout &lt;New_Version&gt;\nsource .venv/bin/activate\npip install .\ndeactivate\n</code></pre>"},{"location":"tutorials/pre-requisites/babylon/#references","title":"References","text":"<p>For more detailed information about Babylon, please refer to the official documentation:</p> <ul> <li>Babylon Documentation \u2014 Developer documentation</li> <li>Babylon End-User Documentation</li> <li>Babylon GitHub Repository</li> </ul>"},{"location":"tutorials/pre-requisites/coAL/","title":"CoAL","text":"<p>Installation instructions will be provided based on internal documentation.</p>"},{"location":"tutorials/pre-requisites/cosmotech-sdk/","title":"Cosmotech SDK","text":"<p>Installation instructions will be provided based on internal documentation.</p>"},{"location":"tutorials/pre-requisites/csm-orc/","title":"csm-orc","text":"<p>Installation instructions will be provided based on internal documentation.</p>"},{"location":"tutorials/pre-requisites/csmcli/","title":"csmcli","text":"<p>Installation instructions will be provided based on internal documentation.</p>"},{"location":"tutorials/pre-requisites/docker/","title":"Docker","text":"<p>Docker is required for containerized deployments and running many development environments.</p>"},{"location":"tutorials/pre-requisites/docker/#install-docker-on-debian","title":"Install Docker on Debian","text":"<p>Docker can be installed using Debian's standard packages. For Debian 12 and earlier, install <code>docker.io</code>. For Debian 13 and onward, install both <code>docker.io</code> and <code>docker-cli</code>:</p> Install Docker (Debian standard packages)<pre><code>sudo apt-get update\n\n# For Debian 12 and earlier:\nsudo apt-get install docker.io\n\n# For Debian 13 and onward:\nsudo apt-get install docker.io docker-cli\n</code></pre>"},{"location":"tutorials/pre-requisites/docker/#add-docker-to-toolingbins","title":"Add Docker to ToolingBins","text":"<p>Docker is installed system-wide, so no symlink is needed. You can add a symlink for convenience:</p> Symlink docker<pre><code>cd ~/ToolingBins\nln -s /usr/bin/docker docker\n</code></pre>"},{"location":"tutorials/pre-requisites/docker/#update-docker","title":"Update Docker","text":"<p>To update Docker, run:</p> Update Docker (Debian standard packages)<pre><code>sudo apt-get update\n\n# For Debian 12 and earlier:\nsudo apt-get install --only-upgrade docker.io\n\n# For Debian 13 and onward:\nsudo apt-get install --only-upgrade docker.io docker-cli\n</code></pre>"},{"location":"tutorials/pre-requisites/docker/#references","title":"References","text":"<ul> <li>Docker Official Documentation</li> <li>Docker Getting Started Guide</li> <li>Docker CLI Reference</li> <li>Docker Compose Documentation</li> </ul>"},{"location":"tutorials/pre-requisites/npm-node/","title":"npm / Node.js","text":"<p>npm and Node.js are required for running JavaScript tools and building many web applications.</p>"},{"location":"tutorials/pre-requisites/npm-node/#install-npm-and-nodejs-using-nvm","title":"Install npm and Node.js using nvm","text":"<p>The recommended way is to use nvm:</p> Install nvm<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n# Restart your terminal or run:\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"\n\n# Install Node.js (replace 20 with desired version)\nnvm install 20\nnvm use 20\n</code></pre>"},{"location":"tutorials/pre-requisites/npm-node/#add-nodejs-and-npm-to-toolingbins","title":"Add Node.js and npm to ToolingBins","text":"<p>Node.js and npm installed via nvm are available in your shell. If you need symlinks for convenience:</p> Symlink node and npm<pre><code>cd ~/ToolingBins\nln -s \"$(which node)\" node\nln -s \"$(which npm)\" npm\n</code></pre>"},{"location":"tutorials/pre-requisites/npm-node/#update-or-switch-nodejs-and-npm-versions","title":"Update or switch Node.js and npm versions","text":"<p>To update or switch Node.js and npm, use nvm:</p> Update or switch Node.js version<pre><code>nvm install &lt;version&gt;   # Install a new version\nnvm use &lt;version&gt;       # Switch to a version\nnvm ls                  # List installed versions\n</code></pre>"},{"location":"tutorials/pre-requisites/npm-node/#update-nvm","title":"Update nvm","text":"<p>To update nvm to the latest version, run:</p> Update nvm<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n# Restart your terminal or reload nvm:\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"\n</code></pre>"},{"location":"tutorials/pre-requisites/npm-node/#references","title":"References","text":"<ul> <li>nvm Official Documentation</li> </ul>"}]}