{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BuildMyApp","text":"<p>The BuildMyApp initiative is here to help you go from begginer to Solution Integrator Master !</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tag:azure","title":"Azure","text":"<ul> <li>            Azure CLI          </li> </ul>"},{"location":"tags/#tag:babylon","title":"Babylon","text":"<ul> <li>            Babylon          </li> </ul>"},{"location":"tags/#tag:bash","title":"Bash","text":"<ul> <li>            Azure CLI          </li> <li>            Babylon          </li> <li>            CoAL          </li> <li>            Cosmotech SDK          </li> <li>            Docker          </li> <li>            Dotenv          </li> <li>            Git          </li> <li>            nvm / npm / Node.js          </li> </ul>"},{"location":"tags/#tag:configuration","title":"Configuration","text":"<ul> <li>            Dotenv          </li> </ul>"},{"location":"tags/#tag:deployment","title":"Deployment","text":"<ul> <li>            Babylon          </li> </ul>"},{"location":"tags/#tag:environment","title":"Environment","text":"<ul> <li>            Dotenv          </li> </ul>"},{"location":"tags/#tag:packaging","title":"Packaging","text":"<ul> <li>            Docker          </li> </ul>"},{"location":"tags/#tag:power-bi","title":"Power BI","text":"<ul> <li>            Power BI          </li> </ul>"},{"location":"tags/#tag:requirement","title":"Requirement","text":"<ul> <li>            Azure CLI          </li> <li>            Babylon          </li> <li>            CoAL          </li> <li>            Cosmotech SDK          </li> <li>            Docker          </li> <li>            Dotenv          </li> <li>            Git          </li> <li>            Power BI          </li> <li>            nvm / npm / Node.js          </li> </ul>"},{"location":"tags/#tag:simulator","title":"Simulator","text":"<ul> <li>            Cosmotech SDK          </li> </ul>"},{"location":"tags/#tag:solution","title":"Solution","text":"<ul> <li>            CoAL          </li> <li>            Docker          </li> </ul>"},{"location":"tags/#tag:versionning","title":"Versionning","text":"<ul> <li>            Git          </li> </ul>"},{"location":"tags/#tag:web-application","title":"Web Application","text":"<ul> <li>            Power BI          </li> <li>            nvm / npm / Node.js          </li> </ul>"},{"location":"tags/#tag:windows","title":"Windows","text":"<ul> <li>            Power BI          </li> </ul>"},{"location":"tags/#tag:adx","title":"adx","text":"<ul> <li>            Frontend          </li> <li>            Functions &amp; Performance          </li> <li>            Overview          </li> </ul>"},{"location":"tags/#tag:data","title":"data","text":"<ul> <li>            Overview          </li> </ul>"},{"location":"tags/#tag:embedding","title":"embedding","text":"<ul> <li>            Embedding &amp; Security          </li> </ul>"},{"location":"tags/#tag:frontend","title":"frontend","text":"<ul> <li>            Frontend          </li> </ul>"},{"location":"tags/#tag:optimization","title":"optimization","text":"<ul> <li>            Functions &amp; Performance          </li> </ul>"},{"location":"tags/#tag:parameters","title":"parameters","text":"<ul> <li>            Parameters &amp; Reuse          </li> </ul>"},{"location":"tags/#tag:performance","title":"performance","text":"<ul> <li>            Functions &amp; Performance          </li> <li>            Parameters &amp; Reuse          </li> </ul>"},{"location":"tags/#tag:power-bi","title":"power-bi","text":"<ul> <li>            Embedding &amp; Security          </li> <li>            Frontend          </li> <li>            Overview          </li> <li>            Parameters &amp; Reuse          </li> </ul>"},{"location":"tags/#tag:reuse","title":"reuse","text":"<ul> <li>            Parameters &amp; Reuse          </li> </ul>"},{"location":"tags/#tag:security","title":"security","text":"<ul> <li>            Embedding &amp; Security          </li> </ul>"},{"location":"tags/#tag:web-app","title":"web-app","text":"<ul> <li>            Embedding &amp; Security          </li> <li>            Frontend          </li> <li>            Functions &amp; Performance          </li> <li>            Overview          </li> <li>            Overview          </li> </ul>"},{"location":"on_hands/","title":"On Hands Build My App - Preparation session","text":"<p>During this On Hands session you will be working with a minimal Simulator Cosmo Tech Project and will get it to be a fully deployed Solution.</p>"},{"location":"on_hands/#resources","title":"Resources","text":"<p>You will be given the following elements by the person in charge of the session :</p> <ul> <li>A Simulator repository hosted on GitHub (on the branch <code>BuildMyApp/Simulator</code>)<ul> <li>This repository contains a minimal project that is \"Deployment Ready\" but has no real configuration</li> <li>You have the full Conceptual Model of the \"Brewery\" which is the example project used for Modeling tutorials</li> <li>It contains a working Simulator that will simulate the Conceptual Model</li> <li>There is 2 minimal run templates :<ul> <li>Example : a simple run that will copy a fixed dataset and simulate it</li> <li>ETL : an empty run template that just shows logs some environment variables</li> </ul> </li> <li>You have a single Simulation set-up : <code>BusinessApp_Simulation</code><ul> <li>It takes a list of CSVs as inputs as found in <code>Simulation/Resource/default_dataset</code> and simulate it</li> <li>With no specific configuration of the simulation it will output results in <code>Simulation/Output</code></li> </ul> </li> </ul> </li> <li>A project deployment repository hosted on Github<ul> <li>This repository contains an example deployable project compatible with the example Simulator you were provided</li> <li>It contains the following elements :<ul> <li>a <code>variables.yaml</code> file that will contain most of the data you will need to update before doing your deployments</li> <li>a <code>project/</code> folder containing the configuration for your project deployment<ul> <li><code>solution.yaml</code> a consolidated solution file compatible with the <code>babylon</code> cli to deploy resources</li> <li><code>workspace.yaml</code> a consolidated workspace file also compatible with <code>babylon</code></li> <li><code>adx/scripts/00-Initialization.kql</code> a kusto script that will initialize the ADX database tied to the project</li> <li><code>powerbi/Example.pbix</code> a simple PowerBi dashboard used for example data display configurated for using connection parameters</li> </ul> </li> </ul> </li> </ul> </li> <li>A set of environment variables allowing you to connect to the resources :<ul> <li><code>BABYLON_ORG_NAME</code> / <code>BABYLON_TOKEN</code> / <code>BABYLON_SERVICE</code> the variables used to connect to the Babylon source of truth</li> <li><code>AZURE_TENANT_ID</code> / <code>AZURE_CLIENT_ID</code> / <code>AZURE_CLIENT_SECRET</code> a triplet of Azure environment variables used to ensure connection to the Cosmo Tech API</li> <li><code>CSM_API_URL</code> / <code>CSM_API_SCOPE</code> a set of environment variables allowing for connection to the Cosmo Tech API</li> </ul> </li> <li>A link to a pre-configurated web-app where your resources will show up once deployed</li> <li>A link to an <code>ADX</code> cluster interactive database query service where you will be able to look at your data</li> <li>A client ID for <code>Swagger</code> allowing you to use the Swagger app for the API to try your hand at the API calls without <code>babylon</code></li> </ul>"},{"location":"on_hands/#permissions","title":"Permissions","text":"<p>The person in charge of your session should make sure you have the following accesses ready :</p> <ul> <li>A Power BI App Licence</li> <li>A User right to the API you will be using during the session</li> <li>An azure entra identity on the tenant used for the training</li> </ul>"},{"location":"on_hands/#software-requirements","title":"Software requirements","text":"<p>You will need most of the requirements listed on this address Make sure all are ready to use before the start of the work session</p> <p>Once all those are ready you will be able to move on to the full Build My App Hands On</p>"},{"location":"on_hands/00_Objectives/","title":"Objectives of the Build My App Hands On","text":"<p>During this Hands On we hope to get you to go through a comprehensive set of objectives that will transform you from a beginner to a proficient Solution Integration Expert.</p>"},{"location":"on_hands/00_Objectives/#quick-objectives-overview","title":"Quick Objectives Overview","text":"<ul> <li>End-to-End Deployment: Go from a Simulator to a working deployed Solution in a single day</li> <li>Complete Development Environment: Every participant should end with a fully working environment to work on Solutions</li> <li>Technical Mastery: Get every participant to have global knowledge on tools and technologies required for Solutions (CoSML, Azure, Power BI, CosmoTech APIs, React, Docker, etc.)</li> <li>Platform Understanding: Offer an insight on how the different components of the Solutions and Platform work together</li> <li>Documentation Navigation: Give every participant the means to find their way through all documentations when they need in-depth answers</li> <li>Team Collaboration: Make participants work as a team throughout the learning process</li> <li>Practical Skills: Deploy and configure the complete brewery solution with all components (simulator, web app, Power BI dashboards, ADX database)</li> <li>Self-Sufficiency: Build confidence to independently develop and deploy new solutions</li> </ul>"},{"location":"on_hands/00_Objectives/#primary-learning-outcomes","title":"Primary Learning Outcomes","text":""},{"location":"on_hands/00_Objectives/#end-to-end-solution-development","title":"End-to-End Solution Development","text":"<ul> <li>Go from a Simulator to a working deployed Solution in a single day</li> <li>Transform the provided brewery solution simulator into a fully functional, cloud-deployed application</li> <li>Complete the entire journey from local development to production deployment</li> </ul>"},{"location":"on_hands/00_Objectives/#technical-environment-mastery","title":"Technical Environment Mastery","text":"<ul> <li>Every participant should end with a fully working environment to work on Solutions</li> <li>Establish a complete development environment with all necessary tools and dependencies</li> <li>Configure and validate connections to Azure services, Power BI, and CosmoTech APIs</li> <li>Set up local development environment with proper toolchains (Node.js, Docker, Azure CLI, etc.)</li> </ul>"},{"location":"on_hands/00_Objectives/#technical-skills-development","title":"Technical Skills Development","text":""},{"location":"on_hands/00_Objectives/#simulator-and-modeling-expertise","title":"Simulator and Modeling Expertise","text":"<ul> <li>Understand and work with Complex Systems Modeling Language (CoSML)</li> <li>Configure and customize the brewery solution conceptual model</li> <li>Implement and test simulation runs using the provided run templates</li> <li>Work with simulation inputs, outputs, and data processing workflows</li> </ul>"},{"location":"on_hands/00_Objectives/#solution-architecture-and-deployment","title":"Solution Architecture and Deployment","text":"<ul> <li>Master the CosmoTech Solution architecture and components</li> <li>Configure solution deployment using YAML files and babylon CLI</li> <li>Understand the relationship between simulators, solutions, and workspaces</li> <li>Deploy solutions to the CosmoTech cloud platform using proper DevOps practices</li> </ul>"},{"location":"on_hands/00_Objectives/#api-integration-and-management","title":"API Integration and Management","text":"<ul> <li>Get proficiency with the CosmoTech API for resource management</li> <li>Use both babylon CLI and direct API calls for solution operations</li> <li>Understand authentication and authorization mechanisms (Azure AD integration)</li> <li>Practice CRUD operations on solutions, workspaces, and related resources</li> </ul>"},{"location":"on_hands/00_Objectives/#web-application-development","title":"Web Application Development","text":"<ul> <li>Configure and customize the provided React-based web application</li> <li>Integrate frontend applications with CosmoTech backend services</li> <li>Set up and configure Azure Data Explorer (ADX) databases for data storage</li> <li>Implement Power BI dashboards and reports for data visualization</li> <li>Understand the data flow from simulation results to user interfaces</li> </ul>"},{"location":"on_hands/00_Objectives/#data-management-and-analytics","title":"Data Management and Analytics","text":"<ul> <li>Configure ETL processes for data transformation and loading</li> <li>Work with CSV datasets and understand data modeling requirements</li> <li>Set up ADX database schemas and queries using KQL (Kusto Query Language)</li> <li>Create meaningful visualizations and dashboards in Power BI</li> </ul>"},{"location":"on_hands/00_Objectives/#practical-implementation-goals","title":"Practical Implementation Goals","text":""},{"location":"on_hands/00_Objectives/#brewery-solution-mastery","title":"Brewery Solution Mastery","text":"<ul> <li>Successfully deploy the complete brewery solution end-to-end</li> <li>Configure all components: simulator, solution, workspace, web app, and Power BI</li> <li>Run successful simulations and view results through the web interface</li> <li>Understand how the brewery business model is represented in the system</li> </ul>"},{"location":"on_hands/00_Objectives/#platform-navigation-and-documentation","title":"Platform Navigation and Documentation","text":"<ul> <li>Give every participant the means to find their way through all documentations when they need in-depth answers</li> <li>Master navigation of the CosmoTech documentation ecosystem</li> <li>Understand how to troubleshoot issues using available resources</li> <li>Learn to effectively use API documentation, tutorials, and reference materials</li> </ul>"},{"location":"on_hands/00_Objectives/#tools-and-technologies-proficiency","title":"Tools and Technologies Proficiency","text":"<ul> <li>Get every participant to have global knowledge on tools and technologies required for Solutions</li> <li>Gain hands-on experience with:</li> <li>Development Tools: Git, Node.js, npm, Docker, VS Code</li> <li>Cloud Platform: Azure services, Azure CLI, Azure Data Explorer</li> <li>CosmoTech Stack: babylon CLI, CosmoTech API, Solution templates</li> <li>Data and Analytics: Power BI, KQL, CSV data processing</li> <li>Web Technologies: React, JavaScript, REST APIs</li> </ul>"},{"location":"on_hands/00_Objectives/#integration-and-system-understanding","title":"Integration and System Understanding","text":""},{"location":"on_hands/00_Objectives/#component-relationships","title":"Component Relationships","text":"<ul> <li>Offer an insight on how the different components of the Solutions and Platform work together</li> <li>Understand the data flow from simulation input to user dashboard</li> <li>Learn how simulators, solutions, workspaces, and web apps interconnect</li> <li>Grasp the role of each component in the overall solution architecture</li> </ul>"},{"location":"on_hands/00_Objectives/#configuration-management","title":"Configuration Management","text":"<ul> <li>Master YAML-based configuration for solutions and workspaces</li> <li>Understand environment variables and configuration management</li> <li>Learn to customize and adapt configurations for different use cases</li> <li>Practice version control and configuration deployment strategies</li> </ul>"},{"location":"on_hands/00_Objectives/#collaboration-and-knowledge-sharing","title":"Collaboration and Knowledge Sharing","text":""},{"location":"on_hands/00_Objectives/#team-based-learning","title":"Team-Based Learning","text":"<ul> <li>Make participants work as a team throughout the hands-on session</li> <li>Collaborate on troubleshooting and problem-solving activities</li> <li>Share knowledge and insights between team members</li> <li>Practice peer review and collaborative development approaches</li> </ul>"},{"location":"on_hands/00_Objectives/#knowledge-transfer","title":"Knowledge Transfer","text":"<ul> <li>Document learnings and create knowledge base for future reference</li> <li>Share best practices and lessons learned with the group</li> <li>Establish mentoring relationships between more and less experienced participants</li> <li>Create a foundation for ongoing collaboration beyond the training session</li> </ul>"},{"location":"on_hands/00_Objectives/#deliverables-and-outcomes","title":"Deliverables and Outcomes","text":"<p>By the end of this hands-on session, each participant will have:</p>"},{"location":"on_hands/00_Objectives/#working-deployments","title":"Working Deployments","text":"<ul> <li>A fully deployed brewery solution accessible via web interface</li> <li>Functional Power BI dashboards displaying simulation results</li> <li>Configured ADX database with proper data schemas</li> <li>Working development environment for future solution development</li> </ul>"},{"location":"on_hands/00_Objectives/#technical-artifacts","title":"Technical Artifacts","text":"<ul> <li>Customized solution and workspace configuration files</li> <li>Deployed run templates and simulation configurations</li> <li>Functional web application with proper API integrations</li> <li>Power BI reports and dashboards tailored to the brewery use case</li> </ul>"},{"location":"on_hands/00_Objectives/#knowledge-and-skills","title":"Knowledge and Skills","text":"<ul> <li>Comprehensive understanding of the CosmoTech platform architecture</li> <li>Ability to independently develop and deploy new solutions</li> <li>Proficiency with all major tools and technologies in the CosmoTech ecosystem</li> <li>Confidence to navigate documentation and resolve issues independently</li> <li>Foundation for becoming a Solution Integration Expert</li> </ul>"},{"location":"on_hands/00_Objectives/#team-capabilities","title":"Team Capabilities","text":"<ul> <li>Established collaborative working relationships</li> <li>Shared knowledge base and documentation</li> <li>Network of peers for ongoing support and knowledge sharing</li> <li>Foundation for future team-based solution development projects</li> </ul>"},{"location":"on_hands/01_Setup/","title":"Setting up your environment","text":"<p>You do stuff and it works</p>"},{"location":"on_hands/02_Discovery/","title":"Deploy a pre-packaged Solution","text":"<p>In this first part we will go through the steps to deploy a pre-packaged solution, using templated content and babylon.</p>"},{"location":"on_hands/02_Discovery/#set-up-the-babylon-configuration","title":"Set up the babylon configuration","text":"<p>Before being able to deploy our solution we will need to configure babylon by defining a state.</p> <p>The babylon state will ensure that when we apply changes to our solution and workspace later we keep working on the same elements and do not duplicate everything.</p> <p>So for now we will work on the <code>build-my-app-training-workspace</code> repository.</p> <p>In that repository you have a file named <code>variables.yaml</code> it contains most of the element you will update during the hands on session.</p> <p>You also have other files that we will come back to later.</p> <p>Back to the <code>variables.yaml</code> file where you will need to apply your first modifications and change the values in the first two keys <code>state_id</code> and <code>context_id</code></p> <p>You can put any other name that you want on those, because the value in <code>remote</code> is set to <code>False</code> we won't be sending the data to be synchronized so the state will be local.</p> <p>Once you have chosen values for those two you will be close to run your first babylon command.</p> <p>Chekpoint</p> <p>You will need to get the babylon environment variables to be able to run any command.</p> <p>Now that you have your environment variables you can run the following commands</p> Activate babylon namespace<pre><code>export BABYLON_ORG_NAME=&lt;Replace this&gt;\nexport BABYLON_TOKEN=&lt;Replace this&gt;\nexport BABYLON_SERVICE=&lt;Replace this&gt;\n\nbabylon namespace use -s &lt;state_id&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt;\n</code></pre> <p>You will need to replace the values in the babylon command with the values that are set in your <code>variables.yaml</code> and the environment variable by those you will be given</p> <p>And once that command runs without error your configuration for babylon will be done.</p>"},{"location":"on_hands/02_Discovery/#customize-the-solution-and-workspace-template","title":"Customize the Solution and Workspace template","text":"<p>With babylon configured we can now customize the template of the solution to get our own workspace and solution.</p> <p>You will need to update the following values in <code>variables.yaml</code>:</p> <ul> <li><code>solution_key</code>: A unique key for your solution</li> <li><code>solution_name</code>: The name of your solution</li> <li><code>solution_description</code>: A description for your solution</li> <li><code>workspace_key</code>: A unique key for your workspace, it will be required for some resource creation</li> <li><code>workspace_name</code>: The name of your workspace</li> <li><code>workspace_description</code>: A decription of your workspace</li> <li><code>powerbi_workspace_name</code>: A unique name for your powerbi workspace that will host your dashboards</li> <li><code>security.accessControlList</code>: Add your mail addresses as <code>Admin</code> to ensure that you will have access to your solution</li> <li><code>powerbi_permissions</code>: Add your mail addresses as <code>Admin</code> to ensure that you will be able to upload and configure your power bi dashboards</li> <li><code>adx_permissions</code>: You will need to make use of the <code>gen_adx_permissions.sh</code> script to get your <code>principal_id</code> and then add yourself as <code>Admin</code> so that you can execute queries on ADX</li> </ul> <p>Once all those changes are made you will be able to run your second babylon command</p> <p>Checkpoint</p> <p>Make sure you have your rights for Power BI ready with a Pro subscription and an Azure Entra identity so that you can get your <code>principal_id</code></p> <p>If all your permissions are ready you can run the following command</p> My first babylon deployment<pre><code>babylon apply project --solution\nbabylon apply project --workspace\n</code></pre> <p>And once those commands are finished you can go to the Build My App Web App and see your workspace ready for you.</p> <p>This now conclude our first subject of deploying a pre-package solution, you can play around with it if you want.</p> <p>The next subject will be to go inside of the solution and start customizing it.</p>"},{"location":"on_hands/03_Simulator/","title":"Customize an existing Solution","text":"<p>Now that we saw how to deploy a Solution it is time to make our own version.</p> <p>We will now move from the <code>build-my-app-training-workspace</code> repository to the <code>onboarding-brewery-solution</code> repository.</p>"},{"location":"on_hands/03_Simulator/#first-look-at-the-simulator","title":"First look at the Simulator","text":"<p>Let's begin our look at the simulator by going through the main files that are used to define a Simulation.</p> <p>In the project 4 files are of interest :</p> <ul> <li><code>ConceptualModel/MyBrewery.csm.xml</code>: This contains the actual model of the simulation, with all the model and logic of the Simulation</li> <li><code>Simulator/Simulator.sor.xml</code>: This defines the Simulator itself which is a combination of a Conceptual Model and probes that will be able to export data during a simulation</li> <li><code>Simulation/BusinessApp_Simulation.sml.xml</code>: This is the description of a simulation, that will instantiate entities and then define how the simulation runs, accompanied by the definition of Consumers that will consume the data from the probes and export them in different formats</li> <li><code>Simulation/Resource/CSV_Brewery.ist.xml</code>: This is an instance of a simulation that will make use of CSV files to generate entities and add them to the simulation</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>All the tutorials you may need for becoming a Solution Integration Expert</p> <p> Pre-requisites</p> <p>What do you need before even getting started ? Everything will be listed here :)</p> <p> pre-requisites</p> <p> Simulator</p> <p>Build and configure your CosmoTech Simulator.</p> <p> Simulator</p> <p> Solution</p> <p>All aspects of building and configuring a CosmoTech Solution.</p> <p> Solution</p> <p> API</p> <p>Work with the CosmoTech API and manage resources.</p> <p> API</p> <p> Web App</p> <p>Frontend, ADX database, and Power BI integration.</p> <p> Web App</p> <p> Packaging</p> <p>Packaging, automation, and deployment tools.</p> <p> Packaging</p>"},{"location":"tutorials/api/","title":"API","text":"<p>This section covers all aspects of working with the CosmoTech API.</p> <p> Yaml files</p> <p>Learn how to structure and use YAML files for API configuration.</p> <p> Yaml files</p> <p> Solution</p> <p>Manage solutions through the API.</p> <p> Solution</p> <p> Workspace</p> <p>Workspaces and their management via API.</p> <p> Workspace</p>"},{"location":"tutorials/api/solution/","title":"Solution","text":"<p>Manage solutions through the CosmoTech API.</p>"},{"location":"tutorials/api/workspace/","title":"Workspace","text":"<p>Workspaces and their management via the CosmoTech API.</p>"},{"location":"tutorials/api/yaml-files/","title":"Yaml files","text":"<p>Learn how to structure and use YAML files for API configuration.</p>"},{"location":"tutorials/packaging/","title":"Packaging","text":"<p>This section covers packaging, automation, and deployment tools for CosmoTech solutions.</p> <p> Babylon</p> <p>Use Babylon for deployment operations and configuration.</p> <p> Babylon</p> <p> Docker</p> <p>Containerize and deploy your solutions with Docker.</p> <p> Docker</p>"},{"location":"tutorials/packaging/babylon/","title":"Babylon","text":"<p>Use Babylon for deployment operations and configuration.</p>"},{"location":"tutorials/packaging/docker/","title":"Docker","text":"<p>Containerize and deploy your solutions with Docker.</p>"},{"location":"tutorials/pre-requisites/","title":"Pre-requisites","text":"<p>First as some tools are required for some elements I recommend you do separate install of those.</p>"},{"location":"tutorials/pre-requisites/#system-preparation","title":"System preparation","text":"<p>To get ready to make your tooling installation folders you can do the following commands.</p> <p>You can also make your own system, but most tutoriels here will suppose you have made the following and that you are using a bash based terminal. (Unix or Windows with WSL2)</p> <p>How to update your tooling will be added in the installation tutorial of the tools.</p> Set-up tooling folder<pre><code>cd ~\n\nmkdir Tooling\nmkdir ToolingBins\n\necho 'export PATH=~/ToolingBins:$PATH' &gt;&gt; ~/.bashrc\n</code></pre> <p>Now every tool that you install can be installed in <code>Tooling</code>, and you can add any executable or script you may need over multiple environment in <code>ToolingBins</code></p> <p> docker</p> <p>Docker is required for containerized deployments and development environments.</p> <p>A working solution requires a docker image to be built and deployed, you will need this tool for that.</p> <p> docker</p> <p> Cosmotech SDK</p> <p>The Cosmo Tech SDK is the main tool you will use to build your simulator that will be the core of your solution.</p> <p>It comes embedded with the CLI <code>csm-cli</code> that will allow you to quickly interract with your project and accelerate some operations.</p> <p> Cosmotech SDK</p> <p> Azure CLI</p> <p>Azure CLI is required for managing Azure resources from the command line.</p> <p>You will be using it mostly to connect to azure image repository to send your solutions there.</p> <p> Azure CLI</p> <p> nvm / npm / node</p> <p>npm and Node.js are required for running JavaScript tools and building web applications.</p> <p>You will need those if you have to do customization of the webapps.</p> <p> nvm / npm / Node.js</p> <p> Dotenv</p> <p>Dotenv CLI is a command-line tool for loading environment variables from .env files.</p> <p>Essential for managing configuration and environment variables in development and deployment workflows.</p> <p> Dotenv</p> <p> Babylon</p> <p>Babylon is the tool made by our DevOps team to do most of the deployment operations on APIs.</p> <p>You will need it to update high level configuration of you application.</p> <p> Babylon</p> <p> CoAL</p> <p>CoAL (CosmoTech Acceleration Library) provides a set of tools and utilities to accelerate CosmoTech solution development.</p> <p>Installing CoAL gives access to two CLIs: <code>csm-data</code> for data management and <code>csm-orc</code> for orchestration workflows.</p> <p> CoAL</p> <p> Power BI</p> <p>Power BI is the tool used to create dashboards embedded in the Cosmo Tech Webapp.</p> <p>Its installation requires you to have access to a Windows environment, either natively (if you are on Windows and used WSL for the rest of the installation) or using a Virtual Machine.</p> <p> Microsoft Power BI</p>"},{"location":"tutorials/pre-requisites/az-cli/","title":"Azure CLI","text":"<p>Azure CLI is required for managing Azure resources from the command line.</p>","tags":["Azure","Bash","Requirement"]},{"location":"tutorials/pre-requisites/az-cli/#install-azure-cli-on-debian","title":"Install Azure CLI on Debian","text":"<p>Install using the official Microsoft repository:</p> Install Azure CLI<pre><code>cd ~/Tooling\n\n# Install dependencies\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg\n\n# Add Microsoft signing key\ncurl -sL https://packages.microsoft.com/keys/microsoft.asc | \\\n  gpg --dearmor | \\\n  sudo tee /etc/apt/keyrings/microsoft.gpg &gt; /dev/null\n\n# Add Azure CLI repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main\" | \\\n  sudo tee /etc/apt/sources.list.d/azure-cli.list\n\nsudo apt-get update\nsudo apt-get install -y azure-cli\n</code></pre>","tags":["Azure","Bash","Requirement"]},{"location":"tutorials/pre-requisites/az-cli/#add-azure-cli-to-toolingbins","title":"Add Azure CLI to ToolingBins","text":"<p>Azure CLI is installed system-wide, but you can add a symlink for convenience:</p> Symlink az<pre><code>cd ~/ToolingBins\nln -s /usr/bin/az az\n</code></pre>","tags":["Azure","Bash","Requirement"]},{"location":"tutorials/pre-requisites/az-cli/#update-azure-cli","title":"Update Azure CLI","text":"<p>To update Azure CLI, run:</p> Update Azure CLI<pre><code>sudo apt-get update\nsudo apt-get install -y azure-cli\n</code></pre>","tags":["Azure","Bash","Requirement"]},{"location":"tutorials/pre-requisites/az-cli/#references","title":"References","text":"<ul> <li>Install Azure CLI (Official Microsoft Docs)</li> <li>Get Started with Azure CLI (Official Microsoft Docs)</li> </ul>","tags":["Azure","Bash","Requirement"]},{"location":"tutorials/pre-requisites/babylon/","title":"Babylon","text":"<p>You will need a working installation of <code>babylon</code> further in the tutorials</p> <p>One easy way to make a portable instalation of it is to execute the following script</p> Portable babylon install<pre><code>cd ~/Tooling\n\ngit clone git@github.com:Cosmo-Tech/Babylon.git Babylon\n\ncd Babylon\ngit checkout 4.2.3\n\npython3 -m venv .venv\n\nsource .venv/bin/activate\npip install .\ndeactivate\n\ncd ~/ToolingBins\nln -s ~/Tooling/Babylon/.venv/bin/babylon babylon\n</code></pre> <p>And know your <code>babylon</code> installation is ready and will be made available over multiple environments while not interacting with any other dependency you may have</p> Update Babylon<pre><code>cd ~/Tooling/Babylon\ngit fetch -ftpa\ngit checkout &lt;New_Version&gt;\nsource .venv/bin/activate\npip install .\ndeactivate\n</code></pre>","tags":["Babylon","Deployment","Bash","Requirement"]},{"location":"tutorials/pre-requisites/babylon/#references","title":"References","text":"<p>For more detailed information about Babylon, please refer to the official documentation:</p> <ul> <li>Babylon Documentation \u2014 Developer documentation</li> <li>Babylon End-User Documentation</li> <li>Babylon GitHub Repository</li> </ul>","tags":["Babylon","Deployment","Bash","Requirement"]},{"location":"tutorials/pre-requisites/coal/","title":"CoAL","text":"<p>You will need a working installation of CoAL (CosmoTech Acceleration Library) further in the tutorials.</p> <p>One easy way to make a portable installation is to execute the following script:</p> Portable CoAL install<pre><code>cd ~/Tooling\n\ngit clone https://github.com/Cosmo-Tech/CosmoTech-Acceleration-Library.git CoAL\n\ncd CoAL\npython -m venv .venv\n\nsource .venv/bin/activate\npip install .\ndeactivate\n\ncd ~/ToolingBins\nln -s ~/Tooling/CoAL/.venv/bin/csm-data csm-data\nln -s ~/Tooling/CoAL/.venv/bin/csm-orc csm-orc\n</code></pre> <p>This will make both <code>csm-data</code> and <code>csm-orc</code> CLIs available in your environment, isolated from other dependencies.</p> <p>To update CoAL, use:</p> Update CoAL<pre><code>cd ~/Tooling/CoAL\ngit fetch --all\ngit checkout &lt;New_Version&gt;\nsource .venv/bin/activate\npip install .\ndeactivate\n</code></pre>","tags":["Solution","Bash","Requirement"]},{"location":"tutorials/pre-requisites/coal/#dependencies","title":"Dependencies","text":"<p>CoAL depends on the csm-orc project for orchestration features. Make sure to install csm-orc as described in its documentation.</p>","tags":["Solution","Bash","Requirement"]},{"location":"tutorials/pre-requisites/coal/#requirements","title":"Requirements","text":"<p>You can also use <code>CosmoTech-Acceleration-Library</code> in you python requirements to add a working installation of CoAl to any virtual environment using the official releases</p>","tags":["Solution","Bash","Requirement"]},{"location":"tutorials/pre-requisites/coal/#references","title":"References","text":"<p>For more detailed information, refer to:</p> <ul> <li>CoAL Documentation</li> <li>csm-orc Documentation</li> <li>CoAL GitHub Repository</li> <li>csm-orc GitHub Repository</li> </ul>","tags":["Solution","Bash","Requirement"]},{"location":"tutorials/pre-requisites/cosmotech-sdk/","title":"Cosmotech SDK","text":"","tags":["Bash","Simulator","Requirement"]},{"location":"tutorials/pre-requisites/cosmotech-sdk/#installation","title":"Installation","text":"<p>As this is the main tool of the Cosmo Tech IP, the installation guide won't be made public here, you can follow the references for the full installation information.</p> <p>But the main elements are :</p> <ul> <li>Install the dependencies</li> <li>Download the installer</li> <li>Run the installer</li> </ul>","tags":["Bash","Simulator","Requirement"]},{"location":"tutorials/pre-requisites/cosmotech-sdk/#update","title":"Update","text":"<p>The installer does not allow for inplace updates, to make version change of your installation you will have to uninstall the current version and follow the installation process anew for the version you want.</p>","tags":["Bash","Simulator","Requirement"]},{"location":"tutorials/pre-requisites/cosmotech-sdk/#references","title":"References","text":"<p>Those references are locked behind an account having access to the Cosmo Tech documentation Portal</p> <ul> <li>SDK User Guide</li> <li>Official installation guide</li> </ul>","tags":["Bash","Simulator","Requirement"]},{"location":"tutorials/pre-requisites/docker/","title":"Docker","text":"<p>Docker is required for containerized deployments and running many development environments.</p>","tags":["Bash","Packaging","Solution","Requirement"]},{"location":"tutorials/pre-requisites/docker/#install-docker-on-debian","title":"Install Docker on Debian","text":"<p>Docker can be installed using Debian's standard packages. For Debian 12 and earlier, install <code>docker.io</code>. For Debian 13 and onward, install both <code>docker.io</code> and <code>docker-cli</code>:</p> Install Docker (Debian standard packages)<pre><code>sudo apt-get update\n\n# For Debian 12 and earlier:\nsudo apt-get install docker.io\n\n# For Debian 13 and onward:\nsudo apt-get install docker.io docker-cli\n</code></pre>","tags":["Bash","Packaging","Solution","Requirement"]},{"location":"tutorials/pre-requisites/docker/#add-docker-to-toolingbins","title":"Add Docker to ToolingBins","text":"<p>Docker is installed system-wide, so no symlink is needed. You can add a symlink for convenience:</p> Symlink docker<pre><code>cd ~/ToolingBins\nln -s /usr/bin/docker docker\n</code></pre>","tags":["Bash","Packaging","Solution","Requirement"]},{"location":"tutorials/pre-requisites/docker/#update-docker","title":"Update Docker","text":"<p>To update Docker, run:</p> Update Docker (Debian standard packages)<pre><code>sudo apt-get update\n\n# For Debian 12 and earlier:\nsudo apt-get install --only-upgrade docker.io\n\n# For Debian 13 and onward:\nsudo apt-get install --only-upgrade docker.io docker-cli\n</code></pre>","tags":["Bash","Packaging","Solution","Requirement"]},{"location":"tutorials/pre-requisites/docker/#references","title":"References","text":"<ul> <li>Docker Official Documentation</li> <li>Docker Getting Started Guide</li> <li>Docker CLI Reference</li> <li>Docker Compose Documentation</li> </ul>","tags":["Bash","Packaging","Solution","Requirement"]},{"location":"tutorials/pre-requisites/dotenv/","title":"Dotenv","text":"<p>Dotenv CLI is a command-line tool for loading environment variables from <code>.env</code> files. It's essential for managing configuration and environment variables in development and deployment workflows.</p>","tags":["Environment","Configuration","Bash","Requirement"]},{"location":"tutorials/pre-requisites/dotenv/#install-dotenv-cli","title":"Install dotenv-cli","text":"<p>The recommended way is to create a portable installation using a virtual environment:</p> Portable dotenv-cli install<pre><code>cd ~/Tooling\n\n# Create a dedicated directory for dotenv-cli\nmkdir dotenv-cli\ncd dotenv-cli\n\n# Create virtual environment\npython3 -m venv .venv\n\n# Activate virtual environment and install dotenv-cli\nsource .venv/bin/activate\npip install dotenv-cli\ndeactivate\n</code></pre>","tags":["Environment","Configuration","Bash","Requirement"]},{"location":"tutorials/pre-requisites/dotenv/#add-dotenv-to-toolingbins","title":"Add dotenv to ToolingBins","text":"<p>Create a symlink to make the <code>dotenv</code> command available across environments:</p> Symlink dotenv<pre><code>cd ~/ToolingBins\nln -s ~/Tooling/dotenv-cli/.venv/bin/dotenv dotenv\n</code></pre> <p>Now your <code>dotenv</code> installation is ready and will be available across multiple environments without interfering with other dependencies.</p>","tags":["Environment","Configuration","Bash","Requirement"]},{"location":"tutorials/pre-requisites/dotenv/#update-dotenv-cli","title":"Update dotenv-cli","text":"<p>To update dotenv-cli to the latest version:</p> Update dotenv-cli<pre><code>cd ~/Tooling/dotenv-cli\nsource .venv/bin/activate\npip install --upgrade dotenv-cli\ndeactivate\n</code></pre>","tags":["Environment","Configuration","Bash","Requirement"]},{"location":"tutorials/pre-requisites/dotenv/#usage","title":"Usage","text":"<p>Once installed, you can use dotenv to load environment variables from <code>.env</code> files:</p> Basic dotenv usage<pre><code># Load .env file and run a command\ndotenv run -- your-command\n\n# Load specific .env file\ndotenv -f path/to/your/.env run -- your-command\n\n# List variables from .env file\ndotenv list\n</code></pre>","tags":["Environment","Configuration","Bash","Requirement"]},{"location":"tutorials/pre-requisites/dotenv/#references","title":"References","text":"<ul> <li>dotenv-cli on PyPI</li> <li>dotenv-cli GitHub Repository</li> <li>Environment Variables Best Practices</li> </ul>","tags":["Environment","Configuration","Bash","Requirement"]},{"location":"tutorials/pre-requisites/git/","title":"Git","text":"<p>Git is a distributed version control system widely used for source code management.</p>","tags":["Bash","Versionning","Requirement"]},{"location":"tutorials/pre-requisites/git/#install-git-on-debian","title":"Install Git on Debian","text":"Install Git<pre><code>sudo apt-get update\nsudo apt-get install -y git\n</code></pre>","tags":["Bash","Versionning","Requirement"]},{"location":"tutorials/pre-requisites/git/#add-git-to-toolingbins","title":"Add Git to ToolingBins","text":"Symlink git<pre><code>cd ~/ToolingBins\nln -s /usr/bin/git git\n</code></pre>","tags":["Bash","Versionning","Requirement"]},{"location":"tutorials/pre-requisites/git/#create-an-ssh-key-for-git-services","title":"Create an SSH Key for Git Services","text":"<p>SSH keys allow secure authentication with Git services for pulling and pushing code.</p> <p>To generate a new SSH key pair:</p> Generate SSH key<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>Explanation of parameters: - <code>-t ed25519</code>: Specifies the type of key to create. <code>ed25519</code> is a modern, secure algorithm recommended for most users. You can use <code>rsa</code> for compatibility, but <code>ed25519</code> is preferred. - <code>-C \"your_email@example.com\"</code>: Adds a comment to the key, typically your email address, to help identify the key later.</p> <p>After running the command: - You will be prompted for a file location (press Enter to accept the default: <code>~/.ssh/id_ed25519</code>). - You can set a passphrase for additional security (optional).</p> <p>The public key will be saved as <code>~/.ssh/id_ed25519.pub</code>. Add this public key to your Git service (GitHub, GitLab, etc.) under SSH keys to enable SSH-based authentication.</p> <p>Then to allow your system to use that ssh key to connect to your services you need to add it to your <code>ssh-agent</code></p> Add SSH key to ssh-agent<pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n</code></pre>","tags":["Bash","Versionning","Requirement"]},{"location":"tutorials/pre-requisites/git/#update-git","title":"Update Git","text":"Update Git<pre><code>sudo apt-get update\nsudo apt-get install --only-upgrade git\n</code></pre>","tags":["Bash","Versionning","Requirement"]},{"location":"tutorials/pre-requisites/git/#references","title":"References","text":"<ul> <li>Git Official Documentation</li> <li>GitHub SSH Key Setup</li> <li>GitLab SSH Key Setup</li> </ul>","tags":["Bash","Versionning","Requirement"]},{"location":"tutorials/pre-requisites/npm-node/","title":"npm / Node.js","text":"<p>npm and Node.js are required for running JavaScript tools and building many web applications.</p>","tags":["Bash","Web Application","Requirement"]},{"location":"tutorials/pre-requisites/npm-node/#install-npm-and-nodejs-using-nvm","title":"Install npm and Node.js using nvm","text":"<p>The recommended way is to use nvm:</p> Install nvm<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n# Restart your terminal or run:\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"\n\n# Install Node.js (replace 20 with desired version)\nnvm install 20\nnvm use 20\n</code></pre>","tags":["Bash","Web Application","Requirement"]},{"location":"tutorials/pre-requisites/npm-node/#add-nodejs-and-npm-to-toolingbins","title":"Add Node.js and npm to ToolingBins","text":"<p>Node.js and npm installed via nvm are available in your shell. If you need symlinks for convenience:</p> Symlink node and npm<pre><code>cd ~/ToolingBins\nln -s \"$(which node)\" node\nln -s \"$(which npm)\" npm\n</code></pre>","tags":["Bash","Web Application","Requirement"]},{"location":"tutorials/pre-requisites/npm-node/#update-or-switch-nodejs-and-npm-versions","title":"Update or switch Node.js and npm versions","text":"<p>To update or switch Node.js and npm, use nvm:</p> Update or switch Node.js version<pre><code>nvm install &lt;version&gt;   # Install a new version\nnvm use &lt;version&gt;       # Switch to a version\nnvm ls                  # List installed versions\n</code></pre>","tags":["Bash","Web Application","Requirement"]},{"location":"tutorials/pre-requisites/npm-node/#update-nvm","title":"Update nvm","text":"<p>To update nvm to the latest version, run:</p> Update nvm<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n# Restart your terminal or reload nvm:\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"\n</code></pre>","tags":["Bash","Web Application","Requirement"]},{"location":"tutorials/pre-requisites/npm-node/#references","title":"References","text":"<ul> <li>nvm Official Documentation</li> </ul>","tags":["Bash","Web Application","Requirement"]},{"location":"tutorials/pre-requisites/power-bi/","title":"Power BI","text":"<p>Power BI is required for creating dashboards that are embedded in the Cosmo Tech Webapp.</p>","tags":["Power BI","Web Application","Windows","Requirement"]},{"location":"tutorials/pre-requisites/power-bi/#install-power-bi-on-windows","title":"Install Power BI on Windows","text":"<p>Power BI Desktop is only available for Windows. You can install it either via the Microsoft Store or by downloading the installer from the official website.</p>","tags":["Power BI","Web Application","Windows","Requirement"]},{"location":"tutorials/pre-requisites/power-bi/#option-1-install-via-microsoft-store","title":"Option 1: Install via Microsoft Store","text":"<ol> <li>Open the Power BI Desktop page on Microsoft Store.</li> <li>Click \"Get\" and follow the instructions to install.</li> </ol>","tags":["Power BI","Web Application","Windows","Requirement"]},{"location":"tutorials/pre-requisites/power-bi/#option-2-download-installer","title":"Option 2: Download Installer","text":"<ol> <li>Go to the Power BI Desktop download page.</li> <li>Download the installer (<code>.msi</code> file).</li> <li>Run the installer and follow the setup instructions.</li> </ol> <p>If you are not on Windows, you will need to use a Windows Virtual Machine to install and run Power BI Desktop.</p>","tags":["Power BI","Web Application","Windows","Requirement"]},{"location":"tutorials/pre-requisites/power-bi/#update-power-bi","title":"Update Power BI","text":"<p>To update Power BI Desktop, use one of the following methods:</p> <ul> <li>If installed via Microsoft Store, updates are handled automatically.</li> <li>If installed via the <code>.msi</code> installer, download the latest version from the official download page and run the installer to update.</li> </ul>","tags":["Power BI","Web Application","Windows","Requirement"]},{"location":"tutorials/pre-requisites/power-bi/#references","title":"References","text":"<ul> <li>Power BI Desktop Download</li> <li>Power BI Documentation</li> <li>Power BI Desktop on Microsoft Store</li> </ul>","tags":["Power BI","Web Application","Windows","Requirement"]},{"location":"tutorials/simulator/","title":"Simulator","text":"<p>This section covers all aspects of building and configuring a CosmoTech Simulator using the CoSMo Platform. These tutorials provide hands-on guidance for complex system modeling, from basic concepts to advanced techniques.</p> <p> Model</p> <p>Master the fundamentals of conceptual modeling with CoSML</p> <p>From defining entities and their relationships to creating complex hierarchical structures with environments and schedulers.</p> <p> Model</p> <p> Rules</p> <p>Deep dive into entity behaviors and dynamics</p> <p>Learn to implement rules, processes, meso-functions, and manage the temporal aspects of your simulations.</p> <p> Rules</p> <p> Input Data</p> <p>Learn to prepare, structure and manage simulation data</p> <p>From model instantiation to initialization, modification, and validation files.</p> <p> Input Data</p> <p> Probing</p> <p>Master simulation observation and analysis</p> <p>Configure probes to collect data and consumers to visualize and export results effectively.</p> <p> Probing</p>"},{"location":"tutorials/simulator/input-data/","title":"Input Data and Model Instantiation","text":"<p>Tutorial Duration: 15-20 minutes</p> <p>This tutorial covers how to create instances of your conceptual model and configure them for simulation. You'll learn to set up entity instances, environments, schedulers, and initial conditions using the Brewery example.</p>"},{"location":"tutorials/simulator/input-data/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this tutorial, you will understand:</p> <ul> <li>The difference between conceptual models and model instances</li> <li>How to create entity instances and set their initial states</li> <li>Environment instantiation and relationship setup</li> <li>Scheduler configuration for controlling simulation flow</li> <li>Initialization and modification files for parameter setting</li> </ul>"},{"location":"tutorials/simulator/input-data/#conceptual-model-vs-model-instance","title":"Conceptual Model vs Model Instance","text":"Aspect Conceptual Model Model Instance Purpose Defines entity types and their behaviors Creates actual instances of entities Level Abstract/Template Concrete/Specific Example \"Customer entity with satisfaction attribute\" \"Customer1 with satisfaction=5, Customer2 with satisfaction=3\" File <code>.csm.xml</code> <code>.ist.xml</code> <p>Think of it like classes vs objects in programming - the conceptual model is the class definition, the instance is the actual object.</p>"},{"location":"tutorials/simulator/input-data/#basic-entity-instantiation","title":"Basic Entity Instantiation","text":""},{"location":"tutorials/simulator/input-data/#creating-the-bar-instance","title":"Creating the Bar Instance","text":"<p>Our brewery simulation starts with a Bar compound entity containing customers:</p> <pre><code>&lt;csm:Bar id=\"1\" name=\"MyBar\"&gt;\n  &lt;csm:Compound&gt;\n    &lt;csm:SubEntities&gt;\n      &lt;csm:Customer id=\"2\" name=\"Customer1\"/&gt;\n      &lt;csm:Customer id=\"3\" name=\"Customer2\"/&gt;\n      &lt;csm:Customer id=\"4\" name=\"Customer3\"/&gt;\n      &lt;csm:Customer id=\"5\" name=\"Customer4\"/&gt;\n    &lt;/csm:SubEntities&gt;\n    &lt;!-- Environment and scheduler definitions follow --&gt;\n  &lt;/csm:Compound&gt;\n&lt;/csm:Bar&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#entity-instance-components","title":"Entity Instance Components","text":"<ul> <li>id: Unique numeric identifier for referencing the instance</li> <li>name: Human-readable name for debugging and display</li> <li>Type: Defined by the XML element name (<code>csm:Customer</code>, <code>csm:Bar</code>)</li> </ul> <p>ID Management</p> <p>Use systematic ID numbering: - Main entities: 1, 10, 100 (easy to remember) - Sub-entities: 2-9, 11-19, 101-109 (grouped by parent) - This makes debugging and referencing much easier</p>"},{"location":"tutorials/simulator/input-data/#environment-instantiation","title":"Environment Instantiation","text":""},{"location":"tutorials/simulator/input-data/#graph-environment-setup","title":"Graph Environment Setup","text":"<p>The CustomerGraph environment defines how customers interact:</p> <pre><code>&lt;csm:Environment&gt;\n  &lt;!-- Define vertices (customers in the graph) --&gt;\n  &lt;csm:Vertex&gt;2&lt;/csm:Vertex&gt;\n  &lt;csm:Vertex&gt;3&lt;/csm:Vertex&gt;\n  &lt;csm:Vertex&gt;4&lt;/csm:Vertex&gt;\n  &lt;csm:Vertex&gt;5&lt;/csm:Vertex&gt;\n\n  &lt;!-- Define arcs (directed relationships) --&gt;\n  &lt;csm:Arc&gt;\n    &lt;csm:Source&gt;2&lt;/csm:Source&gt;\n    &lt;csm:Destination&gt;4&lt;/csm:Destination&gt;\n  &lt;/csm:Arc&gt;\n  &lt;csm:Arc&gt;\n    &lt;csm:Source&gt;4&lt;/csm:Source&gt;\n    &lt;csm:Destination&gt;2&lt;/csm:Destination&gt;\n  &lt;/csm:Arc&gt;\n  &lt;csm:Arc&gt;\n    &lt;csm:Source&gt;2&lt;/csm:Source&gt;\n    &lt;csm:Destination&gt;3&lt;/csm:Destination&gt;\n  &lt;/csm:Arc&gt;\n  &lt;csm:Arc&gt;\n    &lt;csm:Source&gt;3&lt;/csm:Source&gt;\n    &lt;csm:Destination&gt;2&lt;/csm:Destination&gt;\n  &lt;/csm:Arc&gt;\n  &lt;!-- More arcs... --&gt;\n&lt;/csm:Environment&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#graph-structure-analysis","title":"Graph Structure Analysis","text":"<p>This creates a social network where:</p> <ul> <li>Customer2 is highly connected (central hub)</li> <li>Customer1, 3, 4 form a connected cluster</li> <li>Information flows bidirectionally between connected customers</li> </ul>"},{"location":"tutorials/simulator/input-data/#other-environment-types","title":"Other Environment Types","text":""},{"location":"tutorials/simulator/input-data/#regular-grid-environment","title":"Regular Grid Environment","text":"<p>For spatial positioning (2D grid example):</p> <pre><code>&lt;csm:Environment sizeX=\"5\" sizeY=\"5\"&gt;\n  &lt;csm:Entity id=\"2\" placeX=\"1\" placeY=\"1\"/&gt;\n  &lt;csm:Entity id=\"3\" placeX=\"2\" placeY=\"2\"/&gt;\n  &lt;csm:Entity id=\"4\" placeX=\"3\" placeY=\"3\"/&gt;\n&lt;/csm:Environment&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#room-environment","title":"Room Environment","text":"<p>For global interaction (all entities can interact):</p> <pre><code>&lt;csm:Environment&gt;\n  &lt;csm:EntityRef id=\"2\"/&gt;\n  &lt;csm:EntityRef id=\"3\"/&gt;\n  &lt;csm:EntityRef id=\"4\"/&gt;\n  &lt;csm:EntityRef id=\"5\"/&gt;\n&lt;/csm:Environment&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#scheduler-configuration","title":"Scheduler Configuration","text":""},{"location":"tutorials/simulator/input-data/#basic-scheduler-structure","title":"Basic Scheduler Structure","text":"<p>The scheduler controls when and how entity behaviors execute:</p> <pre><code>&lt;csm:Scheduler&gt;\n  &lt;!-- Parallel execution of customer Perceive/React --&gt;\n  &lt;csm:ParallelTaskBlock concurrencyLevel=\"1\"&gt;\n    &lt;csm:ParallelTask&gt;\n      &lt;csm:Entity&gt;2&lt;/csm:Entity&gt;\n    &lt;/csm:ParallelTask&gt;\n    &lt;csm:ParallelTask&gt;\n      &lt;csm:Entity&gt;3&lt;/csm:Entity&gt;\n    &lt;/csm:ParallelTask&gt;\n    &lt;csm:ParallelTask&gt;\n      &lt;csm:Entity&gt;4&lt;/csm:Entity&gt;\n    &lt;/csm:ParallelTask&gt;\n    &lt;csm:ParallelTask&gt;\n      &lt;csm:Entity&gt;5&lt;/csm:Entity&gt;\n    &lt;/csm:ParallelTask&gt;\n  &lt;/csm:ParallelTaskBlock&gt;\n\n  &lt;!-- Sequential execution of customer updates --&gt;\n  &lt;csm:SimpleTask&gt;\n    &lt;csm:Entity&gt;2&lt;/csm:Entity&gt;\n    &lt;csm:Process&gt;Update&lt;/csm:Process&gt;\n  &lt;/csm:SimpleTask&gt;\n  &lt;csm:SimpleTask&gt;\n    &lt;csm:Entity&gt;3&lt;/csm:Entity&gt;\n    &lt;csm:Process&gt;Update&lt;/csm:Process&gt;\n  &lt;/csm:SimpleTask&gt;\n  &lt;!-- More update tasks... --&gt;\n&lt;/csm:Scheduler&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#task-types","title":"Task Types","text":"Task Type Purpose Example SimpleTask Execute a specific rule/process Customer satisfaction update ParallelTaskBlock Execute multiple tasks simultaneously All customers perceive together SequentialTaskBlock Execute tasks in order Step-by-step process RepeatTaskBlock Repeat tasks multiple times Simulation loops"},{"location":"tutorials/simulator/input-data/#parallel-vs-sequential-execution","title":"Parallel vs Sequential Execution","text":"<pre><code>&lt;!-- Parallel: All customers perceive simultaneously --&gt;\n&lt;csm:ParallelTaskBlock&gt;\n  &lt;csm:ParallelTask&gt;&lt;csm:Entity&gt;2&lt;/csm:Entity&gt;&lt;/csm:ParallelTask&gt;\n  &lt;csm:ParallelTask&gt;&lt;csm:Entity&gt;3&lt;/csm:Entity&gt;&lt;/csm:ParallelTask&gt;\n&lt;/csm:ParallelTaskBlock&gt;\n\n&lt;!-- Sequential: Customers update one by one --&gt;\n&lt;csm:SequentialTaskBlock&gt;\n  &lt;csm:SimpleTask&gt;\n    &lt;csm:Entity&gt;2&lt;/csm:Entity&gt;\n    &lt;csm:Process&gt;Update&lt;/csm:Process&gt;\n  &lt;/csm:SimpleTask&gt;\n  &lt;csm:SimpleTask&gt;\n    &lt;csm:Entity&gt;3&lt;/csm:Entity&gt;\n    &lt;csm:Process&gt;Update&lt;/csm:Process&gt;\n  &lt;/csm:SimpleTask&gt;\n&lt;/csm:SequentialTaskBlock&gt;\n</code></pre> <p>Perceive/React Pattern</p> <p>Always use parallel tasks for Perceive and React rules to ensure all entities see the same state before updating. This prevents order-dependent simulation results.</p>"},{"location":"tutorials/simulator/input-data/#model-root-structure","title":"Model Root Structure","text":""},{"location":"tutorials/simulator/input-data/#complete-instance-file-structure","title":"Complete Instance File Structure","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;csm:Model xmlns:csm=\"http://www.cosmotech.com/csm/11.3\"&gt;\n\n  &lt;!-- Root scheduler that starts the simulation --&gt;\n  &lt;csm:Scheduler&gt;\n    &lt;csm:RunTask&gt;\n      &lt;csm:Entity&gt;1&lt;/csm:Entity&gt;  &lt;!-- Start with Bar entity --&gt;\n    &lt;/csm:RunTask&gt;\n  &lt;/csm:Scheduler&gt;\n\n  &lt;!-- Main compound entity instance --&gt;\n  &lt;csm:Bar id=\"1\" name=\"MyBar\"&gt;\n    &lt;!-- Bar configuration here --&gt;\n  &lt;/csm:Bar&gt;\n\n&lt;/csm:Model&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#root-scheduler","title":"Root Scheduler","text":"<p>The root scheduler is essential - it tells the simulation which entity to start with:</p> <ul> <li>RunTask: Executes the scheduler of a compound entity</li> <li>Entity reference: Points to the main compound entity (Bar in our case)</li> </ul>"},{"location":"tutorials/simulator/input-data/#initialization-files","title":"Initialization Files","text":""},{"location":"tutorials/simulator/input-data/#setting-initial-attribute-values","title":"Setting Initial Attribute Values","text":"<p>Create an initialization file (<code>.ini.xml</code>) to set specific starting conditions:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;csmIni:Model xmlns:csmIni=\"http://www.cosmotech.com/csm_initialization/4.0.1\"&gt;\n\n  &lt;csmIni:Entity name=\"MyBar\"&gt;\n    &lt;!-- Set bar attributes --&gt;\n    &lt;csmIni:State&gt;\n      &lt;csmIni:Attribute name=\"Stock\"&gt;\n        &lt;csmIni:Value&gt;15&lt;/csmIni:Value&gt;\n      &lt;/csmIni:Attribute&gt;\n      &lt;csmIni:Attribute name=\"NbWaiters\"&gt;\n        &lt;csmIni:Value&gt;3&lt;/csmIni:Value&gt;\n      &lt;/csmIni:Attribute&gt;\n    &lt;/csmIni:State&gt;\n\n    &lt;!-- Set customer attributes --&gt;\n    &lt;csmIni:SubEntities&gt;\n      &lt;csmIni:Entity name=\"Customer1\"&gt;\n        &lt;csmIni:State&gt;\n          &lt;csmIni:Attribute name=\"Satisfaction\"&gt;\n            &lt;csmIni:Value&gt;7&lt;/csmIni:Value&gt;\n          &lt;/csmIni:Attribute&gt;\n          &lt;csmIni:Attribute name=\"Thirsty\"&gt;\n            &lt;csmIni:Value&gt;false&lt;/csmIni:Value&gt;\n          &lt;/csmIni:Attribute&gt;\n        &lt;/csmIni:State&gt;\n      &lt;/csmIni:Entity&gt;\n\n      &lt;csmIni:Entity name=\"Customer2\"&gt;\n        &lt;csmIni:State&gt;\n          &lt;csmIni:Attribute name=\"Satisfaction\"&gt;\n            &lt;csmIni:Value&gt;3&lt;/csmIni:Value&gt;\n          &lt;/csmIni:Attribute&gt;\n          &lt;csmIni:Attribute name=\"Thirsty\"&gt;\n            &lt;csmIni:Value&gt;true&lt;/csmIni:Value&gt;\n          &lt;/csmIni:Attribute&gt;\n        &lt;/csmIni:State&gt;\n      &lt;/csmIni:Entity&gt;\n      &lt;!-- More customers... --&gt;\n    &lt;/csmIni:SubEntities&gt;\n  &lt;/csmIni:Entity&gt;\n\n&lt;/csmIni:Model&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#initialization-best-practices","title":"Initialization Best Practices","text":"<ol> <li>Realistic Values: Use domain-appropriate initial values</li> <li>Varied States: Create interesting starting conditions</li> <li>Boundary Testing: Include edge cases (empty stock, maximum satisfaction)</li> </ol>"},{"location":"tutorials/simulator/input-data/#modification-files","title":"Modification Files","text":""},{"location":"tutorials/simulator/input-data/#runtime-model-changes","title":"Runtime Model Changes","text":"<p>Modification files (<code>.mod.xml</code>) allow changes during simulation:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;csmMod:Modifications xmlns:csmMod=\"http://www.cosmotech.com/csm_modifications/4.0.1\"&gt;\n\n  &lt;!-- Increase stock dramatically --&gt;\n  &lt;csmMod:DOMAttrModified target=\"[Id=1]\" \n                          scope=\"State\" \n                          attributeName=\"Stock\" \n                          operator=\"+\" \n                          newValue=\"20\"/&gt;\n\n  &lt;!-- Add a new customer --&gt;\n  &lt;csmMod:DOMNodeInserted target=\"MyBar\"&gt;\n    &lt;csmMod:Customer id=\"6\" name=\"Customer5\"&gt;\n      &lt;csmMod:State&gt;\n        &lt;csmMod:Satisfaction&gt;5&lt;/csmMod:Satisfaction&gt;\n        &lt;csmMod:Thirsty&gt;true&lt;/csmMod:Thirsty&gt;\n      &lt;/csmMod:State&gt;\n    &lt;/csmMod:Customer&gt;\n  &lt;/csmMod:DOMNodeInserted&gt;\n\n  &lt;!-- Remove a customer --&gt;\n  &lt;csmMod:DOMNodeRemoved target=\"[Id=4]\"/&gt;\n\n&lt;/csmMod:Modifications&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#modification-operations","title":"Modification Operations","text":"Operation Purpose Example DOMAttrModified Change attribute values Increase stock, modify satisfaction DOMNodeInserted Add new entities New customers arrive DOMNodeRemoved Remove entities Customers leave"},{"location":"tutorials/simulator/input-data/#advanced-configuration-patterns","title":"Advanced Configuration Patterns","text":""},{"location":"tutorials/simulator/input-data/#conditional-entity-creation","title":"Conditional Entity Creation","text":"<pre><code>&lt;!-- Create premium customers with higher initial satisfaction --&gt;\n&lt;csm:Customer id=\"10\" name=\"PremiumCustomer1\"&gt;\n  &lt;!-- Will be initialized differently --&gt;\n&lt;/csm:Customer&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#dynamic-graph-structures","title":"Dynamic Graph Structures","text":"<pre><code>&lt;!-- Hub-and-spoke network --&gt;\n&lt;csm:Arc&gt;&lt;csm:Source&gt;1&lt;/csm:Source&gt;&lt;csm:Destination&gt;2&lt;/csm:Destination&gt;&lt;/csm:Arc&gt;\n&lt;csm:Arc&gt;&lt;csm:Source&gt;1&lt;/csm:Source&gt;&lt;csm:Destination&gt;3&lt;/csm:Destination&gt;&lt;/csm:Arc&gt;\n&lt;csm:Arc&gt;&lt;csm:Source&gt;1&lt;/csm:Source&gt;&lt;csm:Destination&gt;4&lt;/csm:Destination&gt;&lt;/csm:Arc&gt;\n\n&lt;!-- Ring network --&gt;\n&lt;csm:Arc&gt;&lt;csm:Source&gt;2&lt;/csm:Source&gt;&lt;csm:Destination&gt;3&lt;/csm:Destination&gt;&lt;/csm:Arc&gt;\n&lt;csm:Arc&gt;&lt;csm:Source&gt;3&lt;/csm:Source&gt;&lt;csm:Destination&gt;4&lt;/csm:Destination&gt;&lt;/csm:Arc&gt;\n&lt;csm:Arc&gt;&lt;csm:Source&gt;4&lt;/csm:Source&gt;&lt;csm:Destination&gt;2&lt;/csm:Destination&gt;&lt;/csm:Arc&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#complex-scheduler-patterns","title":"Complex Scheduler Patterns","text":"<pre><code>&lt;csm:Scheduler&gt;\n  &lt;!-- Initialization phase --&gt;\n  &lt;csm:SequentialTaskBlock&gt;\n    &lt;csm:SimpleTask&gt;\n      &lt;csm:Entity&gt;1&lt;/csm:Entity&gt;\n      &lt;csm:Process&gt;Initialize&lt;/csm:Process&gt;\n    &lt;/csm:SimpleTask&gt;\n  &lt;/csm:SequentialTaskBlock&gt;\n\n  &lt;!-- Main simulation loop --&gt;\n  &lt;csm:RepeatTaskBlock repetitions=\"100\"&gt;\n    &lt;csm:SequentialTaskBlock&gt;\n      &lt;!-- Customer interactions --&gt;\n      &lt;csm:ParallelTaskBlock&gt;\n        &lt;!-- All customers perceive --&gt;\n      &lt;/csm:ParallelTaskBlock&gt;\n      &lt;csm:ParallelTaskBlock&gt;\n        &lt;!-- All customers react --&gt;\n      &lt;/csm:ParallelTaskBlock&gt;\n\n      &lt;!-- Bar operations --&gt;\n      &lt;csm:SimpleTask&gt;\n        &lt;csm:Entity&gt;1&lt;/csm:Entity&gt;\n        &lt;csm:Process&gt;Serve&lt;/csm:Process&gt;\n      &lt;/csm:SimpleTask&gt;\n    &lt;/csm:SequentialTaskBlock&gt;\n  &lt;/csm:RepeatTaskBlock&gt;\n\n  &lt;!-- Cleanup phase --&gt;\n  &lt;csm:SimpleTask&gt;\n    &lt;csm:Entity&gt;1&lt;/csm:Entity&gt;\n    &lt;csm:Process&gt;Cleanup&lt;/csm:Process&gt;\n  &lt;/csm:SimpleTask&gt;\n&lt;/csm:Scheduler&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#data-types-and-collections","title":"Data Types and Collections","text":""},{"location":"tutorials/simulator/input-data/#working-with-complex-attributes","title":"Working with Complex Attributes","text":"<pre><code>&lt;!-- List of integers --&gt;\n&lt;csmIni:Attribute name=\"CustomerRatings\"&gt;\n  &lt;csmIni:Value&gt;[8, 6, 9, 7, 5]&lt;/csmIni:Value&gt;\n&lt;/csmIni:Attribute&gt;\n\n&lt;!-- Map of string to integer --&gt;\n&lt;csmIni:Attribute name=\"MenuPrices\"&gt;\n  &lt;csmIni:Value&gt;{\"beer\": 5, \"wine\": 8, \"cocktail\": 12}&lt;/csmIni:Value&gt;\n&lt;/csmIni:Attribute&gt;\n\n&lt;!-- Composite type --&gt;\n&lt;csmIni:Attribute name=\"BarInfo\"&gt;\n  &lt;csmIni:Value&gt;{\"name\": \"CoSMo Brewery\", \"capacity\": 50, \"isOpen\": true}&lt;/csmIni:Value&gt;\n&lt;/csmIni:Attribute&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#partial-initialization","title":"Partial Initialization","text":"<pre><code>&lt;!-- Initialize specific list elements --&gt;\n&lt;csmIni:Attribute name=\"CustomerRatings::0\"&gt;\n  &lt;csmIni:Value&gt;10&lt;/csmIni:Value&gt;\n&lt;/csmIni:Attribute&gt;\n\n&lt;!-- Initialize specific map values --&gt;\n&lt;csmIni:Attribute name=\"MenuPrices::beer\"&gt;\n  &lt;csmIni:Value&gt;6&lt;/csmIni:Value&gt;\n&lt;/csmIni:Attribute&gt;\n\n&lt;!-- Initialize composite fields --&gt;\n&lt;csmIni:Attribute name=\"BarInfo::capacity\"&gt;\n  &lt;csmIni:Value&gt;75&lt;/csmIni:Value&gt;\n&lt;/csmIni:Attribute&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#file-organization-best-practices","title":"File Organization Best Practices","text":""},{"location":"tutorials/simulator/input-data/#recommended-file-structure","title":"Recommended File Structure","text":"<pre><code>Simulation/\n\u251c\u2500\u2500 MyBrewery.ist.xml              # Main instance file\n\u251c\u2500\u2500 BreweryInitialization.ini.xml  # Initial values\n\u251c\u2500\u2500 Scenarios/\n\u2502   \u251c\u2500\u2500 RushHour.mod.xml          # Peak time scenario\n\u2502   \u251c\u2500\u2500 StockOutage.mod.xml       # Emergency scenario\n\u2502   \u2514\u2500\u2500 NewCustomers.mod.xml      # Growth scenario\n\u2514\u2500\u2500 Variations/\n    \u251c\u2500\u2500 SmallBar.ist.xml          # 2 customers, 1 waiter\n    \u251c\u2500\u2500 LargeBar.ist.xml          # 20 customers, 5 waiters\n    \u2514\u2500\u2500 SocialHubBar.ist.xml      # Dense network\n</code></pre>"},{"location":"tutorials/simulator/input-data/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Descriptive Names: <code>CustomerSatisfiedHigh</code> vs <code>Customer1</code></li> <li>Systematic IDs: Main entities (1, 10, 100), sub-entities (2-9, 11-19)</li> <li>File Prefixes: <code>Basic_</code>, <code>Test_</code>, <code>Scenario_</code> for different purposes</li> </ul>"},{"location":"tutorials/simulator/input-data/#testing-and-validation","title":"Testing and Validation","text":""},{"location":"tutorials/simulator/input-data/#create-test-scenarios","title":"Create Test Scenarios","text":"<pre><code>&lt;!-- Minimal test case --&gt;\n&lt;csm:Bar id=\"1\" name=\"TestBar\"&gt;\n  &lt;csm:Compound&gt;\n    &lt;csm:SubEntities&gt;\n      &lt;csm:Customer id=\"2\" name=\"TestCustomer\"/&gt;\n    &lt;/csm:SubEntities&gt;\n    &lt;csm:Environment&gt;\n      &lt;csm:Vertex&gt;2&lt;/csm:Vertex&gt;\n    &lt;/csm:Environment&gt;\n  &lt;/csm:Compound&gt;\n  &lt;csm:Scheduler&gt;\n    &lt;csm:SimpleTask&gt;\n      &lt;csm:Entity&gt;2&lt;/csm:Entity&gt;\n      &lt;csm:Process&gt;Update&lt;/csm:Process&gt;\n    &lt;/csm:SimpleTask&gt;\n  &lt;/csm:Scheduler&gt;\n&lt;/csm:Bar&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#validation-patterns","title":"Validation Patterns","text":"<pre><code>&lt;!-- Boundary value testing --&gt;\n&lt;csmIni:Attribute name=\"Satisfaction\"&gt;\n  &lt;csmIni:Value&gt;0&lt;/csmIni:Value&gt;      &lt;!-- Minimum --&gt;\n&lt;/csmIni:Attribute&gt;\n&lt;csmIni:Attribute name=\"Satisfaction\"&gt;\n  &lt;csmIni:Value&gt;10&lt;/csmIni:Value&gt;     &lt;!-- Maximum --&gt;\n&lt;/csmIni:Attribute&gt;\n\n&lt;!-- Edge cases --&gt;\n&lt;csmIni:Attribute name=\"Stock\"&gt;\n  &lt;csmIni:Value&gt;0&lt;/csmIni:Value&gt;      &lt;!-- Empty stock --&gt;\n&lt;/csmIni:Attribute&gt;\n&lt;csmIni:Attribute name=\"NbWaiters\"&gt;\n  &lt;csmIni:Value&gt;1&lt;/csmIni:Value&gt;      &lt;!-- Minimal staff --&gt;\n&lt;/csmIni:Attribute&gt;\n</code></pre>"},{"location":"tutorials/simulator/input-data/#exercise-creating-your-own-instance","title":"Exercise: Creating Your Own Instance","text":"<p>Try creating a new bar instance with these specifications:</p> <ol> <li> <p>Sports Bar:</p> <ul> <li>8 customers in two groups (sports fans vs casual)</li> <li>Higher stock (25 units)</li> <li>4 waiters</li> <li>Two separate customer clusters in the graph</li> </ul> </li> <li> <p>Initialization:</p> <ul> <li>Sports fans start with high satisfaction (8-9)</li> <li>Casual customers start with medium satisfaction (4-6)</li> <li>Half the customers start thirsty</li> </ul> </li> <li> <p>Scheduler:</p> <ul> <li>Add a periodic restock task every 5 simulation steps</li> <li>Include meso-function updates for tracking</li> </ul> </li> </ol>"},{"location":"tutorials/simulator/input-data/#next-steps","title":"Next Steps","text":"<p>In the next tutorial, you'll learn about:</p> <ul> <li>Probing and Monitoring: Collecting data during simulation</li> <li>Consumer Configuration: Processing and visualizing results</li> <li>Real-time Analysis: Understanding simulation behavior</li> <li>Output Formats: CSV, charts, and custom displays</li> </ul> <p>Your model instances define the initial conditions - the next tutorial shows you how to observe what happens during simulation!</p>"},{"location":"tutorials/simulator/model/","title":"Model","text":"<p>Tutorial Duration: 15-20 minutes</p> <p>This tutorial guides you through the fundamentals of conceptual modeling with CoSML (Complex System Modeling Language). You'll learn to define entities, their relationships, and create hierarchical structures that form the foundation of your simulations.</p>"},{"location":"tutorials/simulator/model/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this tutorial, you will understand:</p> <ul> <li>How to define basic and compound entities</li> <li>Entity state attributes and data types</li> <li>Environment types and their usage</li> <li>Entity relationships and hierarchies</li> <li>The structure of a CoSML conceptual model</li> </ul>"},{"location":"tutorials/simulator/model/#introduction-to-cosml","title":"Introduction to CoSML","text":"<p>CoSML (Complex System Modeling Language) is the core language for describing complex systems in CoSMo. It allows you to model:</p> <ul> <li>Entities: The building blocks of your system (basic or compound)</li> <li>Environments: The spaces where entities interact</li> <li>Relationships: How entities are connected and communicate</li> <li>Hierarchies: How entities contain other entities</li> </ul> <p>Let's explore these concepts using a brewery simulation as our example.</p>"},{"location":"tutorials/simulator/model/#the-brewery-model-overview","title":"The Brewery Model Overview","text":"<p>Our brewery model simulates customer satisfaction in a bar environment:</p> <ul> <li>Customers interact with each other and influence satisfaction levels</li> <li>A Bar serves customers and manages stock</li> <li>Customers form a social network where satisfaction spreads</li> <li>The bar has waiters and stock that affect service quality</li> </ul>"},{"location":"tutorials/simulator/model/#data-types","title":"Data Types","text":"<p>Every CoSML model starts with basic data type definitions:</p> <pre><code>&lt;csm:DataType xsi:type=\"csm:BoolType\" name=\"Boolean\"/&gt;\n&lt;csm:DataType xsi:type=\"csm:IntType\" name=\"Integer\" bits=\"32\" signed=\"1\"/&gt;\n&lt;csm:DataType xsi:type=\"csm:FloatType\" name=\"FloatingPoint\" bits=\"32\"/&gt;\n&lt;csm:DataType xsi:type=\"csm:StringType\" name=\"String\"/&gt;\n</code></pre> <p>These define the primitive types used throughout your model for entity attributes.</p>"},{"location":"tutorials/simulator/model/#basic-entities","title":"Basic Entities","text":""},{"location":"tutorials/simulator/model/#customer-entity","title":"Customer Entity","text":"<p>A basic entity represents individual objects in your system. Here's our Customer entity:</p> <pre><code>&lt;csm:BasicEntity name=\"Customer\"&gt;\n  &lt;csm:State xsi:type=\"csm:CompositeType\" name=\"CustomerState\"&gt;\n    &lt;csm:Container&gt;\n      &lt;csm:Attribute name=\"Thirsty\"&gt;\n        &lt;csm:DataTypeReference&gt;Boolean&lt;/csm:DataTypeReference&gt;\n      &lt;/csm:Attribute&gt;\n      &lt;csm:Attribute name=\"Satisfaction\"&gt;\n        &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n      &lt;/csm:Attribute&gt;\n      &lt;csm:Attribute name=\"SurroundingSatisfaction\"&gt;\n        &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n      &lt;/csm:Attribute&gt;\n    &lt;/csm:Container&gt;\n  &lt;/csm:State&gt;\n\n  &lt;!-- Rules and processes will be covered in the Rules tutorial --&gt;\n&lt;/csm:BasicEntity&gt;\n</code></pre>"},{"location":"tutorials/simulator/model/#entity-state","title":"Entity State","text":"<p>The State defines what information each entity instance holds:</p> <ul> <li><code>Thirsty</code>: Whether the customer wants a drink</li> <li><code>Satisfaction</code>: The customer's current satisfaction level  </li> <li><code>SurroundingSatisfaction</code>: Average satisfaction of nearby customers</li> </ul> <p>State Design</p> <p>Design your entity state to include only the essential information needed for your simulation logic. Too many attributes can make models complex and slow.</p>"},{"location":"tutorials/simulator/model/#compound-entities","title":"Compound Entities","text":"<p>Compound entities contain other entities and represent higher-level organizational structures:</p> <pre><code>&lt;csm:CompoundEntity name=\"Bar\"&gt;\n  &lt;csm:State xsi:type=\"csm:CompositeType\" name=\"BarState\"&gt;\n    &lt;csm:Container&gt;\n      &lt;csm:Attribute name=\"Stock\"&gt;\n        &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n        &lt;csm:DefaultValue&gt;10&lt;/csm:DefaultValue&gt;\n      &lt;/csm:Attribute&gt;\n      &lt;csm:Attribute name=\"RestockQty\"&gt;\n        &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n        &lt;csm:DefaultValue&gt;10&lt;/csm:DefaultValue&gt;\n      &lt;/csm:Attribute&gt;\n      &lt;csm:Attribute name=\"NbWaiters\"&gt;\n        &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n        &lt;csm:DefaultValue&gt;2&lt;/csm:DefaultValue&gt;\n      &lt;/csm:Attribute&gt;\n    &lt;/csm:Container&gt;\n  &lt;/csm:State&gt;\n\n  &lt;csm:Compound&gt;\n    &lt;csm:Environment&gt;CustomerGraph&lt;/csm:Environment&gt;\n    &lt;csm:SubEntities&gt;\n      &lt;csm:CanBeWithin&gt;Customer&lt;/csm:CanBeWithin&gt;\n    &lt;/csm:SubEntities&gt;\n  &lt;/csm:Compound&gt;\n&lt;/csm:CompoundEntity&gt;\n</code></pre>"},{"location":"tutorials/simulator/model/#key-compound-entity-features","title":"Key Compound Entity Features","text":"<ol> <li>Own State: The bar has its own attributes (stock, waiters, etc.)</li> <li>Sub-entities: Specifies which entity types can be contained (<code>Customer</code>)</li> <li>Environment: Defines how sub-entities interact (<code>CustomerGraph</code>)</li> <li>Default Values: Attributes can have initial values</li> </ol>"},{"location":"tutorials/simulator/model/#meso-state-and-meso-functions","title":"Meso-State and Meso-Functions","text":"<p>Compound entities can have meso-state - computed information about their sub-entities:</p> <pre><code>&lt;csm:MesoState xsi:type=\"csm:CompositeType\" name=\"BarMesoState\"&gt;\n  &lt;csm:Container&gt;\n    &lt;csm:Attribute name=\"AverageSatisfaction\"&gt;\n      &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n    &lt;/csm:Attribute&gt;\n    &lt;csm:Attribute name=\"NbThirstyCustomers\"&gt;\n      &lt;csm:DataTypeReference&gt;Integer&lt;/csm:DataTypeReference&gt;\n    &lt;/csm:Attribute&gt;\n  &lt;/csm:Container&gt;\n&lt;/csm:MesoState&gt;\n\n&lt;csm:MesoFunction name=\"UpdateAverageSatisfaction\"&gt;\n  &lt;csm:Operations&gt;\n    &lt;csm:Operation xsi:type=\"csm:MesoAverage\" \n                   target=\"AverageSatisfaction\" \n                   subEntityAttribute=\"Satisfaction\"/&gt;\n  &lt;/csm:Operations&gt;\n&lt;/csm:MesoFunction&gt;\n\n&lt;csm:MesoFunction name=\"UpdateNbThirstyCustomers\"&gt;\n  &lt;csm:Operations&gt;\n    &lt;csm:Operation xsi:type=\"csm:MesoValueCount\" \n                   target=\"NbThirstyCustomers\" \n                   subEntityAttribute=\"Thirsty\" \n                   attributeValue=\"true\"/&gt;\n  &lt;/csm:Operations&gt;\n&lt;/csm:MesoFunction&gt;\n</code></pre> <p>Meso-Functions</p> <p>Meso-functions automatically compute aggregate information about sub-entities. Common operations include: - <code>MesoAverage</code>: Average of an attribute - <code>MesoValueCount</code>: Count entities with specific attribute values - <code>MesoSum</code>: Sum of an attribute</p>"},{"location":"tutorials/simulator/model/#environments","title":"Environments","text":"<p>Environments define how entities interact spatially or logically. Our brewery uses a Graph Environment:</p> <pre><code>&lt;csm:Environment xsi:type=\"csm:Graph\" name=\"CustomerGraph\"&gt;\n  &lt;csm:Arc name=\"Satisfaction\"&gt;\n    &lt;csm:Source&gt;Customer&lt;/csm:Source&gt;\n    &lt;csm:Destination&gt;Customer&lt;/csm:Destination&gt;\n  &lt;/csm:Arc&gt;\n&lt;/csm:Environment&gt;\n</code></pre>"},{"location":"tutorials/simulator/model/#environment-types","title":"Environment Types","text":"<p>CoSMo supports several environment types:</p> Environment Type Usage Example Graph Network relationships Social networks, communication Regular Grid Spatial positioning Geographic locations, cellular automata Room Global interaction Shared spaces where all entities interact No Environment No spatial relationships Independent entities"},{"location":"tutorials/simulator/model/#communication","title":"Communication","text":"<p>Entities communicate through Communicators - defined channels for information exchange:</p> <pre><code>&lt;csm:Communicator name=\"CustomerToCustomer\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[return GetSatisfaction();]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n  &lt;csm:CommunicatedReference&gt;Integer&lt;/csm:CommunicatedReference&gt;\n  &lt;csm:Destination&gt;Customer&lt;/csm:Destination&gt;\n&lt;/csm:Communicator&gt;\n</code></pre> <p>This communicator allows customers to share their satisfaction level with other customers in their network.</p>"},{"location":"tutorials/simulator/model/#model-hierarchy-structure","title":"Model Hierarchy Structure","text":"<pre><code>Model (Root)\n\u2514\u2500\u2500 Bar (Compound Entity)\n    \u251c\u2500\u2500 Environment: CustomerGraph\n    \u251c\u2500\u2500 Sub-entities: Customer instances\n    \u2514\u2500\u2500 Meso-state: Aggregated customer data\n</code></pre>"},{"location":"tutorials/simulator/model/#complete-model-structure","title":"Complete Model Structure","text":"<p>Here's how all these pieces fit together in the complete model:</p> <pre><code>&lt;csm:Model xmlns:csm=\"http://www.cosmotech.com/csm/11.3\"&gt;\n  &lt;csm:ModelName&gt;Brewery&lt;/csm:ModelName&gt;\n\n  &lt;!-- Root compound with model environment --&gt;\n  &lt;csm:Compound&gt;\n    &lt;csm:Environment&gt;ModelEnvironment&lt;/csm:Environment&gt;\n  &lt;/csm:Compound&gt;\n\n  &lt;!-- Data types --&gt;\n  &lt;csm:DataType xsi:type=\"csm:BoolType\" name=\"Boolean\"/&gt;\n  &lt;!-- ... other data types ... --&gt;\n\n  &lt;!-- Basic entities --&gt;\n  &lt;csm:BasicEntity name=\"Customer\"&gt;\n    &lt;!-- Customer definition --&gt;\n  &lt;/csm:BasicEntity&gt;\n\n  &lt;!-- Compound entities --&gt;\n  &lt;csm:CompoundEntity name=\"Bar\"&gt;\n    &lt;!-- Bar definition --&gt;\n  &lt;/csm:CompoundEntity&gt;\n\n  &lt;!-- Environments --&gt;\n  &lt;csm:Environment xsi:type=\"csm:Graph\" name=\"CustomerGraph\"&gt;\n    &lt;!-- Graph definition --&gt;\n  &lt;/csm:Environment&gt;\n\n&lt;/csm:Model&gt;\n</code></pre>"},{"location":"tutorials/simulator/model/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Begin with basic entities and add complexity gradually</li> <li>Clear Naming: Use descriptive names for entities, attributes, and environments</li> <li>Logical Hierarchy: Organize entities in a way that reflects real-world relationships</li> <li>Minimal State: Include only necessary attributes in entity state</li> <li>Document Purpose: Use documentation elements to explain entity purposes</li> </ol>"},{"location":"tutorials/simulator/model/#exercise-extending-the-model","title":"Exercise: Extending the Model","text":"<p>Try adding a new entity type to the brewery model:</p> <ol> <li> <p>Waiter Entity:  </p> <ul> <li>State: <code>Busy</code> (Boolean), <code>ServingCustomer</code> (Integer reference)</li> <li>Should be a sub-entity of Bar</li> <li>Add to the customer service process</li> </ul> </li> <li> <p>Menu Item Entity:  </p> <ul> <li>State: <code>Name</code> (String), <code>Price</code> (Float), <code>InStock</code> (Boolean)</li> <li>Create a compound entity for Menu that contains items</li> </ul> </li> </ol>"},{"location":"tutorials/simulator/model/#next-steps","title":"Next Steps","text":"<p>Now that you understand the conceptual model structure, the next tutorial will cover:</p> <ul> <li>Rules and Processes: How entities behave and interact</li> <li>Entity communication patterns</li> <li>Scheduling entity behaviors</li> </ul> <p>The conceptual model defines what your system contains - rules and processes define how it behaves!</p>"},{"location":"tutorials/simulator/probing/","title":"Probing and Data Collection","text":"<p>Tutorial Duration: 15-20 minutes</p> <p>This tutorial covers how to collect, monitor, and analyze data from your simulations. You'll learn to configure probes for data collection and consumers for processing results using the Brewery simulation example.</p>"},{"location":"tutorials/simulator/probing/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this tutorial, you will understand:</p> <ul> <li>The difference between probes and consumers</li> <li>How to configure probes to collect simulation data</li> <li>Setting up consumers for data processing and visualization</li> <li>Real-time monitoring and analysis techniques</li> <li>Export formats and post-simulation analysis</li> </ul>"},{"location":"tutorials/simulator/probing/#probes-vs-consumers","title":"Probes vs Consumers","text":"<p>The CoSMo data collection system separates what to observe from how to process it:</p> Component Purpose Example Probe Defines what data to collect Monitor customer satisfaction Consumer Defines how to process data Export to CSV, display charts <p>This separation allows you to: - Use one probe with multiple consumers (CSV + real-time chart) - Reuse consumers with different probes - Easily switch between analysis methods</p>"},{"location":"tutorials/simulator/probing/#basic-probe-configuration","title":"Basic Probe Configuration","text":""},{"location":"tutorials/simulator/probing/#stock-monitoring-probe","title":"Stock Monitoring Probe","text":"<p>Let's start with monitoring the bar's stock level:</p> <pre><code>&lt;csmSon:ProbeInstance name=\"StockProbe\" \n                      type=\"GenericAttributesSender\" \n                      location=\"Simulation\" \n                      loader=\"GenericAttributes\" \n                      tag=\"1::1::1::0.5\" \n                      active=\"1\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n    &lt;csmSon:AttributeName&gt;Stock&lt;/csmSon:AttributeName&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#probe-configuration-elements","title":"Probe Configuration Elements","text":"<ul> <li>name: Unique identifier for the probe</li> <li>type: <code>GenericAttributesSender</code> for basic attribute monitoring</li> <li>location: <code>Simulation</code> means it's scheduled in the simulation scheduler</li> <li>tag: When in the simulation schedule to execute (more on this below)</li> <li>active: <code>1</code> (enabled) or <code>0</code> (disabled)</li> </ul>"},{"location":"tutorials/simulator/probing/#entity-and-attribute-selection","title":"Entity and Attribute Selection","text":"<pre><code>&lt;csmSon:Entity&gt;\n  &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n  &lt;csmSon:AttributeName&gt;Stock&lt;/csmSon:AttributeName&gt;\n&lt;/csmSon:Entity&gt;\n</code></pre> <ul> <li>Name: Path to the entity (<code>Model::EntityName</code>)</li> <li>AttributeName: Which attribute to monitor</li> </ul>"},{"location":"tutorials/simulator/probing/#advanced-probe-configuration","title":"Advanced Probe Configuration","text":""},{"location":"tutorials/simulator/probing/#multiple-attributes-from-one-entity","title":"Multiple Attributes from One Entity","text":"<pre><code>&lt;csmSon:ProbeInstance name=\"BarProbe\" \n                      type=\"GenericAttributesSender\" \n                      location=\"Simulation\" \n                      loader=\"GenericAttributes\" \n                      tag=\"1::1::1::0.7\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n    &lt;csmSon:AttributeName&gt;Stock&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;NbWaiters&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;RestockQty&lt;/csmSon:AttributeName&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#sub-entity-monitoring","title":"Sub-Entity Monitoring","text":"<p>Monitor attributes from all customers in the bar:</p> <pre><code>&lt;csmSon:ProbeInstance name=\"SatisfactionProbe\" \n                      type=\"GenericAttributesSender\" \n                      location=\"Simulation\" \n                      loader=\"GenericAttributes\" \n                      tag=\"1::1::1::0.6\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n    &lt;csmSon:SubEntityTypeName&gt;Customer&lt;/csmSon:SubEntityTypeName&gt;\n    &lt;csmSon:AttributeName&gt;Satisfaction&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;Thirsty&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;SurroundingSatisfaction&lt;/csmSon:AttributeName&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#key-sub-entity-features","title":"Key Sub-Entity Features","text":"<ul> <li>SubEntityTypeName: Specifies which type of sub-entities to monitor</li> <li>Multiple Attributes: Can monitor several attributes per sub-entity</li> <li>Automatic Collection: Gathers data from all instances of that type</li> </ul>"},{"location":"tutorials/simulator/probing/#scheduling-probes","title":"Scheduling Probes","text":""},{"location":"tutorials/simulator/probing/#understanding-tags","title":"Understanding Tags","text":"<p>Tags control when probes execute in the simulation schedule:</p> <pre><code>tag=\"1::1::1::0.5\"\n     \u2502  \u2502  \u2502   \u2514\u2500\u2500 Position within the task block (0.5 = between 0 and 1)\n     \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500 Task block level\n     \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Repeat block iteration\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Top level position\n</code></pre>"},{"location":"tutorials/simulator/probing/#coordinating-with-simulation-schedule","title":"Coordinating with Simulation Schedule","text":"<p>Match probe timing to your simulation structure:</p> <pre><code>&lt;!-- Simulation scheduler structure --&gt;\n&lt;csmSon:RepeatTaskBlock repetitions=\"10\"&gt;           &lt;!-- tag: 1 --&gt;\n  &lt;csmSon:WhileTaskBlock&gt;                           &lt;!-- tag: 1::1 --&gt;\n    &lt;csmSon:SequentialTaskBlock&gt;                    &lt;!-- tag: 1::1::1 --&gt;\n      &lt;csmSon:ModelTask&gt;Model&lt;/csmSon:ModelTask&gt;    &lt;!-- tag: 1::1::1::1 --&gt;\n      &lt;!-- Probe here: tag=\"1::1::1::1.5\" --&gt;\n      &lt;csmSon:SimpleTask&gt;...&lt;/csmSon:SimpleTask&gt;    &lt;!-- tag: 1::1::1::2 --&gt;\n    &lt;/csmSon:SequentialTaskBlock&gt;\n  &lt;/csmSon:WhileTaskBlock&gt;\n  &lt;csmSon:SimpleTask&gt;Restock&lt;/csmSon:SimpleTask&gt;    &lt;!-- tag: 1::2 --&gt;\n&lt;/csmSon:RepeatTaskBlock&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#consumer-configuration","title":"Consumer Configuration","text":""},{"location":"tutorials/simulator/probing/#csv-file-consumer","title":"CSV File Consumer","text":"<p>Export data to CSV files for analysis:</p> <pre><code>&lt;csmSon:ConsumerInstance name=\"StockProbeCSV\" type=\"CSVFileGenericConsumer\"&gt;\n  &lt;csmSon:Properties&gt;\n    &lt;csmSon:Property name=\"FileName\"&gt;Stock&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"FileType\"&gt;all&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"RowType\"&gt;iteration&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"ColumnType\"&gt;attribute&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"Separator\"&gt;,&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"DesignateEntityByName\"&gt;1&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"OutputDirectory\"/&gt;\n  &lt;/csmSon:Properties&gt;\n  &lt;csmSon:ProbeReferences&gt;\n    &lt;csmSon:ProbeReference&gt;StockProbe&lt;/csmSon:ProbeReference&gt;\n  &lt;/csmSon:ProbeReferences&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#csv-consumer-properties","title":"CSV Consumer Properties","text":"Property Values Purpose FileType <code>all</code>, <code>iteration</code>, <code>entity</code>, <code>attribute</code> How to organize files RowType <code>iteration</code>, <code>entity</code>, <code>attribute</code> What varies between rows ColumnType <code>iteration</code>, <code>entity</code>, <code>attribute</code> What varies between columns Separator <code>,</code>, <code>;</code>, <code>\\t</code> CSV delimiter DesignateEntityByName <code>0</code>, <code>1</code> Use names vs IDs"},{"location":"tutorials/simulator/probing/#file-organization-examples","title":"File Organization Examples","text":""},{"location":"tutorials/simulator/probing/#all-data-in-one-file-filetypeall","title":"All Data in One File (FileType=\"all\")","text":"<pre><code>iteration,entity,attribute,value\n1,MyBar,Stock,10\n1,Customer1,Satisfaction,7\n1,Customer2,Satisfaction,3\n2,MyBar,Stock,9\n2,Customer1,Satisfaction,6\n</code></pre>"},{"location":"tutorials/simulator/probing/#separate-files-per-entity-filetypeentity","title":"Separate Files per Entity (FileType=\"entity\")","text":"<p>Stock_MyBar.csv: <pre><code>iteration,Stock,NbWaiters\n1,10,2\n2,9,2\n3,8,2\n</code></pre></p> <p>Satisfaction_Customer1.csv: <pre><code>iteration,Satisfaction,Thirsty\n1,7,false\n2,6,false\n3,7,true\n</code></pre></p>"},{"location":"tutorials/simulator/probing/#real-time-chart-consumer","title":"Real-Time Chart Consumer","text":"<p>Display data in real-time during simulation:</p> <pre><code>&lt;csmSon:ConsumerInstance name=\"SatisfactionChart\" type=\"QtGenericChartViewerGL\"&gt;\n  &lt;csmSon:Properties&gt;\n    &lt;csmSon:Property name=\"SelectionMode\"&gt;AllEntities&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"Layout\"&gt;GroupedByEntity&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"PlottingType\"&gt;Curve&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"PlottingDimension\"&gt;2D&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"XDataRepresents\"&gt;SimulationStep&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"YDataRepresents\"&gt;SimulationData&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"YAttributeReferenceType\"&gt;EveryAttributes&lt;/csmSon:Property&gt;\n  &lt;/csmSon:Properties&gt;\n  &lt;csmSon:ProbeReferences&gt;\n    &lt;csmSon:ProbeReference&gt;SatisfactionProbe&lt;/csmSon:ProbeReference&gt;\n  &lt;/csmSon:ProbeReferences&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#chart-consumer-properties","title":"Chart Consumer Properties","text":"Property Values Purpose PlottingType <code>Curve</code>, <code>Histogram</code>, <code>PointCloud</code> Chart type Layout <code>GroupedByEntity</code>, <code>GroupedByAttribute</code>, <code>MultiGraph</code> Organization XDataRepresents <code>SimulationStep</code>, <code>EntityID</code>, <code>SimulationData</code> X-axis data YDataRepresents <code>SimulationStep</code>, <code>EntityID</code>, <code>SimulationData</code> Y-axis data"},{"location":"tutorials/simulator/probing/#complete-simulation-configuration","title":"Complete Simulation Configuration","text":""},{"location":"tutorials/simulator/probing/#simulation-file-structure","title":"Simulation File Structure","text":"<pre><code>&lt;csmSon:Simulation xmlns:csmSon=\"http://www.cosmotech.com/csm_simulation/11.3\"&gt;\n\n  &lt;!-- Model instance configuration --&gt;\n  &lt;csmSon:ModelInstance type=\"Brewery\" id=\"Model\"&gt;\n    &lt;csmSon:Loader type=\"csmXMLInstantiation\"&gt;\n      &lt;csmSon:Property name=\"File\"&gt;MyBrewery&lt;/csmSon:Property&gt;\n    &lt;/csmSon:Loader&gt;\n  &lt;/csmSon:ModelInstance&gt;\n\n  &lt;!-- Simulation scheduler --&gt;\n  &lt;csmSon:SimulatorInstance&gt;\n    &lt;csmSon:SchedulerInstance&gt;\n      &lt;!-- Main simulation loop --&gt;\n    &lt;/csmSon:SchedulerInstance&gt;\n\n    &lt;!-- Probe instances --&gt;\n    &lt;csmSon:ProbeInstances&gt;\n      &lt;!-- Stock monitoring --&gt;\n      &lt;csmSon:ProbeInstance name=\"StockProbe\"&gt;\n        &lt;!-- Configuration --&gt;\n      &lt;/csmSon:ProbeInstance&gt;\n\n      &lt;!-- Customer satisfaction monitoring --&gt;\n      &lt;csmSon:ProbeInstance name=\"SatisfactionProbe\"&gt;\n        &lt;!-- Configuration --&gt;\n      &lt;/csmSon:ProbeInstance&gt;\n    &lt;/csmSon:ProbeInstances&gt;\n\n    &lt;!-- Consumer instances --&gt;\n    &lt;csmSon:ConsumerInstances&gt;\n      &lt;!-- CSV export --&gt;\n      &lt;csmSon:ConsumerInstance name=\"StockProbeCSV\"&gt;\n        &lt;!-- Configuration --&gt;\n      &lt;/csmSon:ConsumerInstance&gt;\n\n      &lt;!-- Real-time chart --&gt;\n      &lt;csmSon:ConsumerInstance name=\"SatisfactionChart\"&gt;\n        &lt;!-- Configuration --&gt;\n      &lt;/csmSon:ConsumerInstance&gt;\n    &lt;/csmSon:ConsumerInstances&gt;\n  &lt;/csmSon:SimulatorInstance&gt;\n\n&lt;/csmSon:Simulation&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#advanced-probing-techniques","title":"Advanced Probing Techniques","text":""},{"location":"tutorials/simulator/probing/#meso-state-monitoring","title":"Meso-State Monitoring","text":"<p>Monitor computed aggregate values:</p> <pre><code>&lt;csmSon:ProbeInstance name=\"BarMetricsProbe\" \n                      type=\"GenericAttributesSender\" \n                      location=\"Simulation\" \n                      loader=\"GenericAttributes\" \n                      tag=\"1::1::1::0.8\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n    &lt;csmSon:AttributeName&gt;AverageSatisfaction&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;NbThirstyCustomers&lt;/csmSon:AttributeName&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#conditional-probing","title":"Conditional Probing","text":"<p>Use probe activation to monitor only when needed:</p> <pre><code>&lt;!-- Active only during specific conditions --&gt;\n&lt;csmSon:ProbeInstance name=\"ConditionalProbe\" \n                      active=\"1\"\n                      tag=\"1::1::1::0.5\"&gt;\n  &lt;!-- Can be activated/deactivated programmatically --&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#environment-monitoring","title":"Environment Monitoring","text":"<p>Monitor environment-specific data like network connections:</p> <pre><code>&lt;csmSon:ProbeInstance name=\"NetworkProbe\" \n                      type=\"GraphProbe\" \n                      location=\"Model\" \n                      entity=\"MyBar\" \n                      tag=\"1::1::1::0.3\"&gt;\n  &lt;csmSon:Graph owner=\"MyBar\"&gt;\n    &lt;csmSon:Entity type=\"Customer\"&gt;\n      &lt;csmSon:Attribute&gt;Satisfaction&lt;/csmSon:Attribute&gt;\n    &lt;/csmSon:Entity&gt;\n  &lt;/csmSon:Graph&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#analysis-workflows","title":"Analysis Workflows","text":""},{"location":"tutorials/simulator/probing/#performance-monitoring","title":"Performance Monitoring","text":"<p>Track key performance indicators:</p> <pre><code>&lt;!-- System health indicators --&gt;\n&lt;csmSon:ProbeInstance name=\"SystemHealthProbe\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n    &lt;csmSon:AttributeName&gt;Stock&lt;/csmSon:AttributeName&gt;          &lt;!-- Resource level --&gt;\n    &lt;csmSon:AttributeName&gt;NbThirstyCustomers&lt;/csmSon:AttributeName&gt;  &lt;!-- Demand --&gt;\n    &lt;csmSon:AttributeName&gt;AverageSatisfaction&lt;/csmSon:AttributeName&gt; &lt;!-- Quality --&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#efficiency-metrics","title":"Efficiency Metrics","text":"<p>Calculate and monitor derived metrics:</p> <pre><code>&lt;!-- Service efficiency calculation --&gt;\n&lt;csmSon:ProbeInstance name=\"EfficiencyProbe\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;\n    &lt;csmSon:AttributeName&gt;NbWaiters&lt;/csmSon:AttributeName&gt;      &lt;!-- Capacity --&gt;\n    &lt;csmSon:AttributeName&gt;NbThirstyCustomers&lt;/csmSon:AttributeName&gt; &lt;!-- Load --&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#real-time-monitoring-setup","title":"Real-Time Monitoring Setup","text":""},{"location":"tutorials/simulator/probing/#debug-console-output","title":"Debug Console Output","text":"<p>Quick text-based monitoring:</p> <pre><code>&lt;csmSon:ConsumerInstance name=\"ConsoleOutput\" type=\"ShellGenericTextViewer\"&gt;\n  &lt;csmSon:Properties&gt;\n    &lt;csmSon:Property name=\"ShowOnlyLastValue\"&gt;1&lt;/csmSon:Property&gt;\n  &lt;/csmSon:Properties&gt;\n  &lt;csmSon:ProbeReferences&gt;\n    &lt;csmSon:ProbeReference&gt;StockProbe&lt;/csmSon:ProbeReference&gt;\n  &lt;/csmSon:ProbeReferences&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#live-dashboard","title":"Live Dashboard","text":"<p>Multiple charts in a coordinated view:</p> <pre><code>&lt;csmSon:ConsumerInstance name=\"Dashboard\" type=\"QtGenericChartViewerGL\"&gt;\n  &lt;csmSon:Properties&gt;\n    &lt;csmSon:Property name=\"Layout\"&gt;MultiGraph&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"UpdateRate\"&gt;100&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"WindowTitle\"&gt;Brewery Monitoring&lt;/csmSon:Property&gt;\n  &lt;/csmSon:Properties&gt;\n  &lt;csmSon:ProbeReferences&gt;\n    &lt;csmSon:ProbeReference&gt;StockProbe&lt;/csmSon:ProbeReference&gt;\n    &lt;csmSon:ProbeReference&gt;SatisfactionProbe&lt;/csmSon:ProbeReference&gt;\n    &lt;csmSon:ProbeReference&gt;BarMetricsProbe&lt;/csmSon:ProbeReference&gt;\n  &lt;/csmSon:ProbeReferences&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#data-export-and-post-processing","title":"Data Export and Post-Processing","text":""},{"location":"tutorials/simulator/probing/#comprehensive-csv-export","title":"Comprehensive CSV Export","text":"<p>Export all simulation data for external analysis:</p> <pre><code>&lt;csmSon:ConsumerInstance name=\"ComprehensiveExport\" type=\"CSVFileGenericConsumer\"&gt;\n  &lt;csmSon:Properties&gt;\n    &lt;csmSon:Property name=\"FileType\"&gt;all&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"RowType\"&gt;iteration&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"ColumnType\"&gt;attribute&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"DesignateEntityByName\"&gt;1&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"SerializeAtEachIteration\"&gt;0&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"OutputDirectory\"&gt;results/&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"FileName\"&gt;brewery_simulation&lt;/csmSon:Property&gt;\n  &lt;/csmSon:Properties&gt;\n  &lt;csmSon:ProbeReferences&gt;\n    &lt;csmSon:ProbeReference&gt;StockProbe&lt;/csmSon:ProbeReference&gt;\n    &lt;csmSon:ProbeReference&gt;SatisfactionProbe&lt;/csmSon:ProbeReference&gt;\n    &lt;csmSon:ProbeReference&gt;BarMetricsProbe&lt;/csmSon:ProbeReference&gt;\n  &lt;/csmSon:ProbeReferences&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#selective-export","title":"Selective Export","text":"<p>Export specific data subsets:</p> <pre><code>&lt;!-- Export only final results --&gt;\n&lt;csmSon:ConsumerInstance name=\"FinalResults\" type=\"CSVFileGenericConsumer\"&gt;\n  &lt;csmSon:Properties&gt;\n    &lt;csmSon:Property name=\"FileType\"&gt;entity&lt;/csmSon:Property&gt;\n    &lt;csmSon:Property name=\"ExportLastIterationOnly\"&gt;1&lt;/csmSon:Property&gt;\n  &lt;/csmSon:Properties&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n\n&lt;!-- Export aggregated data only --&gt;\n&lt;csmSon:ConsumerInstance name=\"AggregatedData\" type=\"CSVFileGenericConsumer\"&gt;\n  &lt;csmSon:ProbeReferences&gt;\n    &lt;csmSon:ProbeReference&gt;BarMetricsProbe&lt;/csmSon:ProbeReference&gt;\n  &lt;/csmSon:ProbeReferences&gt;\n&lt;/csmSon:ConsumerInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#common-probing-patterns","title":"Common Probing Patterns","text":""},{"location":"tutorials/simulator/probing/#pattern-1-system-state-tracking","title":"Pattern 1: System State Tracking","text":"<p>Monitor overall system health:</p> <pre><code>&lt;!-- Resource levels --&gt;\n&lt;csmSon:AttributeName&gt;Stock&lt;/csmSon:AttributeName&gt;\n&lt;csmSon:AttributeName&gt;NbWaiters&lt;/csmSon:AttributeName&gt;\n\n&lt;!-- Demand indicators --&gt;\n&lt;csmSon:AttributeName&gt;NbThirstyCustomers&lt;/csmSon:AttributeName&gt;\n\n&lt;!-- Quality metrics --&gt;\n&lt;csmSon:AttributeName&gt;AverageSatisfaction&lt;/csmSon:AttributeName&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#pattern-2-individual-entity-tracking","title":"Pattern 2: Individual Entity Tracking","text":"<p>Monitor specific entities in detail:</p> <pre><code>&lt;csmSon:ProbeInstance name=\"Customer1DetailedProbe\"&gt;\n  &lt;csmSon:Entity&gt;\n    &lt;csmSon:Name&gt;Model::MyBar::Customer1&lt;/csmSon:Name&gt;\n    &lt;csmSon:AttributeName&gt;Satisfaction&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;Thirsty&lt;/csmSon:AttributeName&gt;\n    &lt;csmSon:AttributeName&gt;SurroundingSatisfaction&lt;/csmSon:AttributeName&gt;\n  &lt;/csmSon:Entity&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#pattern-3-network-analysis","title":"Pattern 3: Network Analysis","text":"<p>Monitor relationship-dependent data:</p> <pre><code>&lt;csmSon:ProbeInstance name=\"SocialNetworkProbe\" type=\"GraphProbe\"&gt;\n  &lt;csmSon:Graph owner=\"MyBar\"&gt;\n    &lt;csmSon:Entity type=\"Customer\"&gt;\n      &lt;csmSon:Attribute&gt;Satisfaction&lt;/csmSon:Attribute&gt;\n    &lt;/csmSon:Entity&gt;\n    &lt;csmSon:Links&gt;\n      &lt;csmSon:LinkAttribute&gt;SatisfactionFlow&lt;/csmSon:LinkAttribute&gt;\n    &lt;/csmSon:Links&gt;\n  &lt;/csmSon:Graph&gt;\n&lt;/csmSon:ProbeInstance&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"tutorials/simulator/probing/#probe-not-collecting-data","title":"Probe Not Collecting Data","text":"<p>Check these common issues:</p> <pre><code>&lt;!-- Ensure active=\"1\" --&gt;\n&lt;csmSon:ProbeInstance active=\"1\"&gt;\n\n&lt;!-- Verify correct entity path --&gt;\n&lt;csmSon:Name&gt;Model::MyBar&lt;/csmSon:Name&gt;  &lt;!-- Not just \"MyBar\" --&gt;\n\n&lt;!-- Check attribute name spelling --&gt;\n&lt;csmSon:AttributeName&gt;Satisfaction&lt;/csmSon:AttributeName&gt;  &lt;!-- Case sensitive --&gt;\n\n&lt;!-- Ensure probe timing is correct --&gt;\n&lt;csmSon:ProbeInstance tag=\"1::1::1::0.5\"&gt;  &lt;!-- After entity updates --&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#consumer-not-processing","title":"Consumer Not Processing","text":"<p>Verify consumer configuration:</p> <pre><code>&lt;!-- Check probe reference --&gt;\n&lt;csmSon:ProbeReferences&gt;\n  &lt;csmSon:ProbeReference&gt;StockProbe&lt;/csmSon:ProbeReference&gt;  &lt;!-- Must match probe name --&gt;\n&lt;/csmSon:ProbeReferences&gt;\n\n&lt;!-- Verify file permissions for CSV export --&gt;\n&lt;csmSon:Property name=\"OutputDirectory\"&gt;results/&lt;/csmSon:Property&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#performance-issues","title":"Performance Issues","text":"<p>Optimize probe frequency:</p> <pre><code>&lt;!-- Reduce frequency for heavy probes --&gt;\n&lt;csmSon:ProbeInstance tag=\"1::10::1::0.5\"&gt;  &lt;!-- Every 10th iteration --&gt;\n\n&lt;!-- Use selective attributes --&gt;\n&lt;csmSon:AttributeName&gt;AverageSatisfaction&lt;/csmSon:AttributeName&gt;  &lt;!-- Not all individual satisfactions --&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/simulator/probing/#1-strategic-probe-placement","title":"1. Strategic Probe Placement","text":"<pre><code>&lt;!-- Collect aggregate data frequently --&gt;\n&lt;csmSon:ProbeInstance name=\"SystemMetrics\" tag=\"1::1::1::0.9\"&gt;\n\n&lt;!-- Collect detailed data less frequently --&gt;\n&lt;csmSon:ProbeInstance name=\"DetailedAnalysis\" tag=\"1::5::1::0.9\"&gt;\n\n&lt;!-- Collect expensive data rarely --&gt;\n&lt;csmSon:ProbeInstance name=\"NetworkAnalysis\" tag=\"1::25::1::0.9\"&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#2-meaningful-names","title":"2. Meaningful Names","text":"<pre><code>&lt;!-- Good: descriptive names --&gt;\n&lt;csmSon:ProbeInstance name=\"CustomerSatisfactionTrends\"&gt;\n&lt;csmSon:ConsumerInstance name=\"SatisfactionCSVExport\"&gt;\n\n&lt;!-- Avoid: generic names --&gt;\n&lt;csmSon:ProbeInstance name=\"Probe1\"&gt;\n&lt;csmSon:ConsumerInstance name=\"Consumer1\"&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#3-organized-output","title":"3. Organized Output","text":"<pre><code>&lt;!-- Organized directory structure --&gt;\n&lt;csmSon:Property name=\"OutputDirectory\"&gt;results/satisfaction/&lt;/csmSon:Property&gt;\n&lt;csmSon:Property name=\"OutputDirectory\"&gt;results/stock/&lt;/csmSon:Property&gt;\n&lt;csmSon:Property name=\"OutputDirectory\"&gt;results/network/&lt;/csmSon:Property&gt;\n</code></pre>"},{"location":"tutorials/simulator/probing/#exercise-complete-brewery-monitoring","title":"Exercise: Complete Brewery Monitoring","text":"<p>Set up comprehensive monitoring for the brewery simulation:</p>"},{"location":"tutorials/simulator/probing/#1-system-overview-dashboard","title":"1. System Overview Dashboard","text":"<p>Create probes and consumers for: - Bar stock levels and waiter count - Total number of thirsty customers - Average customer satisfaction - Real-time chart display</p>"},{"location":"tutorials/simulator/probing/#2-customer-analysis","title":"2. Customer Analysis","text":"<p>Monitor individual customer patterns: - Satisfaction evolution over time - Thirst patterns - Social influence effects - Export to separate CSV files</p>"},{"location":"tutorials/simulator/probing/#3-performance-metrics","title":"3. Performance Metrics","text":"<p>Track efficiency indicators: - Service rate (customers served per time step) - Stock utilization rate - Customer satisfaction variance - Peak demand periods</p>"},{"location":"tutorials/simulator/probing/#4-network-effects","title":"4. Network Effects","text":"<p>Analyze social influence: - Satisfaction propagation through the network - Influence strength between connected customers - Network stability metrics</p>"},{"location":"tutorials/simulator/probing/#integration-with-external-tools","title":"Integration with External Tools","text":""},{"location":"tutorials/simulator/probing/#python-analysis","title":"Python Analysis","text":"<p>Export CSV data for Python analysis:</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load simulation results\ndf = pd.read_csv('results/brewery_simulation.csv')\n\n# Analyze satisfaction trends\nsatisfaction_data = df[df['attribute'] == 'Satisfaction']\nsatisfaction_pivot = satisfaction_data.pivot(index='iteration', \n                                           columns='entity', \n                                           values='value')\n\n# Plot results\nsatisfaction_pivot.plot(title='Customer Satisfaction Over Time')\nplt.show()\n</code></pre>"},{"location":"tutorials/simulator/probing/#r-analysis","title":"R Analysis","text":"<p>Statistical analysis in R:</p> <pre><code>library(ggplot2)\nlibrary(dplyr)\n\n# Load data\ndata &lt;- read.csv(\"results/brewery_simulation.csv\")\n\n# Analyze satisfaction distribution\nsatisfaction &lt;- data %&gt;% \n  filter(attribute == \"Satisfaction\") %&gt;%\n  ggplot(aes(x = iteration, y = value, color = entity)) +\n  geom_line() +\n  labs(title = \"Customer Satisfaction Trends\")\n\nprint(satisfaction)\n</code></pre>"},{"location":"tutorials/simulator/probing/#next-steps","title":"Next Steps","text":"<p>You've now completed the core simulator tutorials! You understand:</p> <ul> <li>Model Structure: How to define entities and relationships</li> <li>Behavior Implementation: Rules, processes, and entity interactions  </li> <li>Instance Creation: Setting up specific simulation scenarios</li> <li>Data Collection: Probing and monitoring simulation results</li> </ul>"},{"location":"tutorials/simulator/probing/#advanced-topics-to-explore","title":"Advanced Topics to Explore","text":"<ol> <li>Optimization: Parameter tuning and scenario comparison</li> <li>Validation: Model verification and sensitivity analysis</li> <li>Scalability: Large-scale simulations and performance optimization</li> <li>Integration: Connecting simulations to external data sources</li> <li>Visualization: Advanced charting and interactive displays</li> </ol> <p>The foundation you've built with these tutorials prepares you for complex real-world modeling challenges using the CoSMo platform!</p>"},{"location":"tutorials/simulator/rules/","title":"Rules and Processes","text":"<p>Tutorial Duration: 20-25 minutes</p> <p>This tutorial covers entity behavior implementation through rules and processes. You'll learn how entities interact, communicate, and evolve over time using the Brewery model as a practical example.</p>"},{"location":"tutorials/simulator/rules/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this tutorial, you will understand:</p> <ul> <li>The difference between rules and processes</li> <li>How to implement entity behavior in C++/Python</li> <li>Communication patterns between entities</li> <li>The Perceive/React design pattern</li> <li>Meso-functions for compound entity computations</li> <li>Scheduling and task execution</li> </ul>"},{"location":"tutorials/simulator/rules/#rules-vs-processes","title":"Rules vs Processes","text":"<p>In CoSMo, entity behavior is implemented through two main mechanisms:</p> Type Purpose Environment Required Example Use Rules Environment-dependent behavior Yes Social interactions, spatial movement Processes Internal entity updates No State updates, internal calculations"},{"location":"tutorials/simulator/rules/#basic-processes","title":"Basic Processes","text":""},{"location":"tutorials/simulator/rules/#customer-update-process","title":"Customer Update Process","text":"<p>Let's start with a simple process that updates customer thirst:</p> <pre><code>&lt;csm:Process name=\"Update\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\nint test = rand()%10 + GetSatisfaction();\nif (!GetThirsty() &amp;&amp; test &gt; 5)\n{\n  SetThirsty(true);\n}\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n&lt;/csm:Process&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#process-breakdown","title":"Process Breakdown","text":"<ul> <li>No Environment: Processes don't require environment context</li> <li>State Access: Use <code>Get[AttributeName]()</code> and <code>Set[AttributeName](value)</code></li> <li>Logic: Customers become thirsty based on satisfaction and randomness</li> <li>Probability: Higher satisfaction = higher chance of becoming thirsty</li> </ul> <p>State Access Methods</p> <p>CoSMo automatically generates getter/setter methods for all entity attributes: - <code>GetSatisfaction()</code> \u2192 reads the Satisfaction attribute - <code>SetThirsty(true)</code> \u2192 sets the Thirsty attribute to true</p>"},{"location":"tutorials/simulator/rules/#the-perceivereact-pattern","title":"The Perceive/React Pattern","text":"<p>For environment-dependent behavior, CoSMo uses the Perceive/React pattern:</p> <ol> <li>Perceive: Gather information from neighbors</li> <li>React: Update state based on perceived information</li> </ol>"},{"location":"tutorials/simulator/rules/#customer-perceive-rule","title":"Customer Perceive Rule","text":"<pre><code>&lt;csm:Rule name=\"Perceive\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\nint satisfaction = 0;\nint count = 0;\n\n// Iterate through all Customer neighbors in the graph\ncsmForEachTypedNeighbor(BE_Customer, neighbor)\n{\n  // Get satisfaction from each neighbor via communicator\n  satisfaction += neighbor-&gt;GetCustomerToCustomer(this);\n  count++;\n}\n\n// Calculate average satisfaction of neighbors\nint avrg = int(float(satisfaction) / float(csm::Math::Max(count, 1)));\nSetSurroundingSatisfaction(avrg);\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n  &lt;csm:EnvironmentReference&gt;CustomerGraph&lt;/csm:EnvironmentReference&gt;\n&lt;/csm:Rule&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#customer-react-rule","title":"Customer React Rule","text":"<pre><code>&lt;csm:Rule name=\"React\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\nint satisfaction = GetSatisfaction();\n\n// Adjust satisfaction based on neighbors\nif (satisfaction &gt; GetSurroundingSatisfaction())\n{\n  SetSatisfaction(satisfaction - 1);  // Decrease if above average\n}\nelse if (satisfaction &lt; GetSurroundingSatisfaction())\n{\n  SetSatisfaction(satisfaction + 1);  // Increase if below average\n}\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n  &lt;csm:EnvironmentReference&gt;CustomerGraph&lt;/csm:EnvironmentReference&gt;\n&lt;/csm:Rule&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#key-perceivereact-concepts","title":"Key Perceive/React Concepts","text":"<ul> <li>Environment Reference: Both rules specify which environment they operate in</li> <li>Neighbor Iteration: <code>csmForEachTypedNeighbor</code> loops through connected entities</li> <li>Communication: Entities request data from neighbors via communicators</li> <li>Separation: Perceive gathers data, React makes decisions</li> </ul> <p>Why Perceive/React?</p> <p>This pattern ensures simultaneous updates. All entities perceive the current state, then all react based on that snapshot, preventing order-dependent results.</p>"},{"location":"tutorials/simulator/rules/#communicators","title":"Communicators","text":"<p>Communicators define how entities share information:</p> <pre><code>&lt;csm:Communicator name=\"CustomerToCustomer\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\nreturn GetSatisfaction();\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n  &lt;csm:CommunicatedReference&gt;Integer&lt;/csm:CommunicatedReference&gt;\n  &lt;csm:Destination&gt;Customer&lt;/csm:Destination&gt;\n&lt;/csm:Communicator&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#communicator-components","title":"Communicator Components","text":"<ul> <li>Implementation: Code that computes the shared value</li> <li>CommunicatedReference: Data type being shared</li> <li>Destination: Which entity types can receive this data</li> </ul>"},{"location":"tutorials/simulator/rules/#using-communicators","title":"Using Communicators","text":"<p>In the Perceive rule, neighbors are accessed via the communicator:</p> <pre><code>neighbor-&gt;GetCustomerToCustomer(this)\n</code></pre> <p>This calls the <code>CustomerToCustomer</code> communicator on the neighbor, passing <code>this</code> customer as the destination.</p>"},{"location":"tutorials/simulator/rules/#compound-entity-processes","title":"Compound Entity Processes","text":"<p>Compound entities can have processes that operate on their sub-entities:</p>"},{"location":"tutorials/simulator/rules/#bar-serve-process","title":"Bar Serve Process","text":"<pre><code>&lt;csm:Process name=\"Serve\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\n// Calculate service capacity based on waiters and demand\nint thirsty = GetNbThirstyCustomers();\nint waiters = GetNbWaiters();\nint threshold = int(10.f * float(waiters) / float(csm::Math::Max(thirsty, 1)));\n\n// Iterate through all customer sub-entities\ncsmForEachTypedSubEntity(BE_Customer, customer)\n{\n  if (customer-&gt;GetThirsty())\n  {\n    // Probability of service based on waiter availability\n    int test = rand()%10 + 1;\n    if (test &lt;= threshold &amp;&amp; GetStock() &gt; 0)\n    {\n      // Successful service\n      SetStock(GetStock() - 1);\n      customer-&gt;SetThirsty(false);\n      customer-&gt;SetSatisfaction(customer-&gt;GetSatisfaction() + 1);\n    }\n    else if (customer-&gt;GetSatisfaction() &gt; 0)\n    {\n      // Poor service reduces satisfaction\n      customer-&gt;SetSatisfaction(customer-&gt;GetSatisfaction() - 1);\n    }\n  }\n}\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n&lt;/csm:Process&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#bar-restock-process","title":"Bar Restock Process","text":"<pre><code>&lt;csm:Process name=\"Restock\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\nSetStock(GetStock() + GetRestockQty());\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n&lt;/csm:Process&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#compound-process-features","title":"Compound Process Features","text":"<ul> <li>Sub-entity Access: <code>csmForEachTypedSubEntity</code> iterates through contained entities</li> <li>Direct Manipulation: Compound entities can modify sub-entity state</li> <li>Business Logic: Complex algorithms involving multiple entities</li> <li>Resource Management: Stock tracking and consumption</li> </ul>"},{"location":"tutorials/simulator/rules/#meso-functions","title":"Meso-Functions","text":"<p>Meso-functions compute aggregate information about sub-entities:</p>"},{"location":"tutorials/simulator/rules/#automatic-meso-functions","title":"Automatic Meso-Functions","text":"<pre><code>&lt;csm:MesoFunction name=\"UpdateAverageSatisfaction\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n  &lt;csm:Operations&gt;\n    &lt;csm:Operation xsi:type=\"csm:MesoAverage\" \n                   target=\"AverageSatisfaction\" \n                   subEntityAttribute=\"Satisfaction\"/&gt;\n  &lt;/csm:Operations&gt;\n&lt;/csm:MesoFunction&gt;\n\n&lt;csm:MesoFunction name=\"UpdateNbThirstyCustomers\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n  &lt;csm:Operations&gt;\n    &lt;csm:Operation xsi:type=\"csm:MesoValueCount\" \n                   target=\"NbThirstyCustomers\" \n                   subEntityAttribute=\"Thirsty\" \n                   attributeValue=\"true\"/&gt;\n  &lt;/csm:Operations&gt;\n&lt;/csm:MesoFunction&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#built-in-meso-operations","title":"Built-in Meso-Operations","text":"Operation Purpose Example <code>MesoAverage</code> Calculate mean value Average customer satisfaction <code>MesoValueCount</code> Count specific values Number of thirsty customers <code>MesoSum</code> Sum all values Total satisfaction points <code>MesoMin/MesoMax</code> Find extremes Most/least satisfied customer"},{"location":"tutorials/simulator/rules/#custom-meso-functions","title":"Custom Meso-Functions","text":"<p>You can also implement custom logic:</p> <pre><code>&lt;csm:MesoFunction name=\"CalculateServiceQuality\"&gt;\n  &lt;csm:Implementation language=\"cpp\"&gt;\n    &lt;csm:Code&gt;&lt;![CDATA[\nfloat totalSatisfaction = 0;\nint customerCount = 0;\n\ncsmForEachTypedSubEntity(BE_Customer, customer)\n{\n  totalSatisfaction += customer-&gt;GetSatisfaction();\n  customerCount++;\n}\n\nfloat avgSatisfaction = totalSatisfaction / csm::Math::Max(customerCount, 1);\nfloat serviceQuality = avgSatisfaction * GetStock() / 10.0f;\n\nSetServiceQuality(serviceQuality);\n    ]]&gt;&lt;/csm:Code&gt;\n  &lt;/csm:Implementation&gt;\n&lt;/csm:MesoFunction&gt;\n</code></pre>"},{"location":"tutorials/simulator/rules/#advanced-behavior-patterns","title":"Advanced Behavior Patterns","text":""},{"location":"tutorials/simulator/rules/#conditional-logic","title":"Conditional Logic","text":"<pre><code>// State-dependent behavior\nif (GetStock() &lt; 5)\n{\n  // Emergency restocking\n  SetRestockQty(20);\n}\nelse if (GetStock() &gt; 50)\n{\n  // Reduce waste\n  SetRestockQty(5);\n}\n</code></pre>"},{"location":"tutorials/simulator/rules/#probabilistic-behavior","title":"Probabilistic Behavior","text":"<pre><code>// Random events with weighted probability\nint satisfaction = GetSatisfaction();\nint randomValue = rand() % 100;\nint threshold = 20 + satisfaction * 5;  // Higher satisfaction = higher chance\n\nif (randomValue &lt; threshold)\n{\n  // Positive event occurs\n  PerformAction();\n}\n</code></pre>"},{"location":"tutorials/simulator/rules/#neighbor-dependent-actions","title":"Neighbor-Dependent Actions","text":"<pre><code>// Actions based on neighbor count and state\nint happyNeighbors = 0;\nint totalNeighbors = 0;\n\ncsmForEachTypedNeighbor(BE_Customer, neighbor)\n{\n  totalNeighbors++;\n  if (neighbor-&gt;GetSatisfaction() &gt; 7)\n  {\n    happyNeighbors++;\n  }\n}\n\nfloat happyRatio = float(happyNeighbors) / float(csm::Math::Max(totalNeighbors, 1));\nif (happyRatio &gt; 0.7f)\n{\n  // Surrounded by happy customers\n  SetSatisfaction(GetSatisfaction() + 2);\n}\n</code></pre>"},{"location":"tutorials/simulator/rules/#code-organization-best-practices","title":"Code Organization Best Practices","text":""},{"location":"tutorials/simulator/rules/#1-clear-variable-names","title":"1. Clear Variable Names","text":"<pre><code>// Good\nint currentSatisfaction = GetSatisfaction();\nint neighborSatisfactionSum = 0;\nint neighborCount = 0;\n\n// Avoid\nint s = GetSatisfaction();\nint sum = 0;\nint c = 0;\n</code></pre>"},{"location":"tutorials/simulator/rules/#2-separate-concerns","title":"2. Separate Concerns","text":"<pre><code>// Calculate neighbor influence\nint neighborInfluence = CalculateNeighborInfluence();\n\n// Apply influence to self\nApplyInfluence(neighborInfluence);\n\n// Update internal state\nUpdateInternalState();\n</code></pre>"},{"location":"tutorials/simulator/rules/#3-use-helper-functions","title":"3. Use Helper Functions","text":"<pre><code>// In a meso-function or complex process\nbool IsBarBusy()\n{\n  return GetNbThirstyCustomers() &gt; GetNbWaiters() * 3;\n}\n\nfloat CalculateServiceEfficiency()\n{\n  return float(GetNbWaiters()) / float(csm::Math::Max(GetNbThirstyCustomers(), 1));\n}\n</code></pre>"},{"location":"tutorials/simulator/rules/#common-implementation-patterns","title":"Common Implementation Patterns","text":""},{"location":"tutorials/simulator/rules/#1-threshold-based-behavior","title":"1. Threshold-Based Behavior","text":"<pre><code>const int SATISFACTION_THRESHOLD = 5;\nconst int STOCK_LOW_THRESHOLD = 3;\n\nif (GetSatisfaction() &lt; SATISFACTION_THRESHOLD)\n{\n  // Low satisfaction behavior\n}\n\nif (GetStock() &lt; STOCK_LOW_THRESHOLD)\n{\n  // Emergency restocking\n}\n</code></pre>"},{"location":"tutorials/simulator/rules/#2-state-machine-pattern","title":"2. State Machine Pattern","text":"<pre><code>enum CustomerState { CONTENT, THIRSTY, DRINKING, LEAVING };\n\nswitch (GetCurrentState())\n{\n  case CONTENT:\n    if (ShouldBecomeThirsty()) TransitionTo(THIRSTY);\n    break;\n  case THIRSTY:\n    if (IsServed()) TransitionTo(DRINKING);\n    break;\n  // ... other states\n}\n</code></pre>"},{"location":"tutorials/simulator/rules/#3-weighted-decision-making","title":"3. Weighted Decision Making","text":"<pre><code>struct Decision {\n  std::string action;\n  float weight;\n};\n\nstd::vector&lt;Decision&gt; decisions = {\n  {\"stay\", GetSatisfaction() * 0.1f},\n  {\"leave\", (10 - GetSatisfaction()) * 0.2f},\n  {\"order\", GetThirsty() ? 0.8f : 0.1f}\n};\n\n// Select action based on weights\nstd::string chosenAction = SelectWeightedRandom(decisions);\n</code></pre>"},{"location":"tutorials/simulator/rules/#debugging-and-testing","title":"Debugging and Testing","text":""},{"location":"tutorials/simulator/rules/#adding-debug-output","title":"Adding Debug Output","text":"<pre><code>// Use CoSMo logging\ncsm::Log().Info(\"Customer {} satisfaction: {}\", GetId(), GetSatisfaction());\ncsm::Log().Debug(\"Neighbor count: {}\", neighborCount);\n</code></pre>"},{"location":"tutorials/simulator/rules/#validation-checks","title":"Validation Checks","text":"<pre><code>// Ensure valid ranges\nif (GetSatisfaction() &lt; 0) SetSatisfaction(0);\nif (GetSatisfaction() &gt; 10) SetSatisfaction(10);\n\n// Check preconditions\nassert(GetStock() &gt;= 0);\nassert(GetNbWaiters() &gt; 0);\n</code></pre>"},{"location":"tutorials/simulator/rules/#exercise-implementing-new-behaviors","title":"Exercise: Implementing New Behaviors","text":"<p>Try implementing these additional behaviors:</p>"},{"location":"tutorials/simulator/rules/#1-customer-loyalty-system","title":"1. Customer Loyalty System","text":"<p>Add a <code>Loyalty</code> attribute and implement:  </p> <ul> <li>Loyalty increases with good service  </li> <li>Loyal customers are more forgiving of poor service  </li> <li>Loyalty affects tip amounts  </li> </ul>"},{"location":"tutorials/simulator/rules/#2-peak-hours-simulation","title":"2. Peak Hours Simulation","text":"<p>Implement time-based behavior:  </p> <ul> <li>More customers become thirsty during peak hours  </li> <li>Bar adjusts waiter count based on time  </li> <li>Price changes based on demand  </li> </ul>"},{"location":"tutorials/simulator/rules/#3-social-influence-propagation","title":"3. Social Influence Propagation","text":"<p>Enhance the social network:  </p> <ul> <li>Extremely satisfied customers create \"viral\" satisfaction  </li> <li>Dissatisfied customers have stronger negative influence  </li> <li>Implement influence decay over network distance  </li> </ul>"},{"location":"tutorials/simulator/rules/#next-steps","title":"Next Steps","text":"<p>In the next tutorial, you'll learn about:</p> <ul> <li>Model Instantiation: Creating entity instances</li> <li>Environment Setup: Defining spatial relationships</li> <li>Scheduler Configuration: Controlling when behaviors execute</li> <li>Initialization: Setting initial conditions</li> </ul> <p>The rules and processes you've learned here define how entities behave - the next tutorial covers when and where they behave!</p>"},{"location":"tutorials/solution/","title":"Solution","text":"<p>This section covers all aspects of building and configuring a CosmoTech Solution.</p> <p> CSM-ORC</p> <p>Learn about the CosmoTech Orchestrator and its integration.</p> <p> CSM-ORC</p> <p> Run templates</p> <p>How to use and configure run templates for your solution.</p> <p> Run templates</p> <p> ETL</p> <p>ETL processes for data transformation and loading.</p> <p> ETL</p> <p> CoAL</p> <p>Accelerate your solution development with CoAL.</p> <p> CoAL</p> <p> Custom library</p> <p>Integrate and use custom libraries in your solution.</p> <p> Custom library</p> <p> Custom commands</p> <p>Define and use custom commands for advanced operations.</p> <p> Custom commands</p>"},{"location":"tutorials/solution/coal/","title":"CoAL","text":"<p>Accelerate your solution development with the CosmoTech Acceleration Library (CoAL).</p>"},{"location":"tutorials/solution/coal/#overview","title":"Overview","text":"<p>The CosmoTech Acceleration Library (CoAL) is a Python library that provides pre-built functions and CLI tools to accelerate solution development. It offers standardized interfaces for common operations like data handling, API interactions, and external service integrations.</p>"},{"location":"tutorials/solution/coal/#what-is-coal","title":"What is CoAL?","text":"<p>CoAL provides four main components: - Core Library: Base functionality and utilities - CSM Data CLI: Command-line interface for data operations - Orchestrator Plugins: Templates and extensions for CSM-ORC - Translation: Internationalization support</p>"},{"location":"tutorials/solution/coal/#csm-data-cli","title":"CSM Data CLI","text":""},{"location":"tutorials/solution/coal/#available-commands","title":"Available Commands","text":"<p>The <code>csm-data</code> CLI provides commands for common operations: - API Operations: Interact with CosmoTech APIs - Data Management: Handle datasets and files - Storage Operations: Work with Azure, AWS, and other storage - Database Operations: PostgreSQL, ADX, SQLite operations</p> <p>[Placeholder: List of main csm data commands]</p>"},{"location":"tutorials/solution/coal/#command-groups","title":"Command Groups","text":"<p>Based on the meetings, key command groups include: - adx: Azure Data Explorer operations - azure-storage: Azure Blob Storage operations - s3: AWS S3 operations (used for Dell ECS integration) - postgresql: Database operations - API commands: Direct platform API interactions</p>"},{"location":"tutorials/solution/coal/#data-store","title":"Data Store","text":""},{"location":"tutorials/solution/coal/#sqlite-integration","title":"SQLite Integration","text":"<p>CoAL provides a local SQLite database for: - Temporary Data Storage: Keep data between run template steps - Data Processing: SQL-based data manipulation - Performance: Fast local access vs. repeated file operations - Export: Dump to various target systems</p> <p>[Placeholder: Example of data store usage in run template]</p>"},{"location":"tutorials/solution/coal/#common-data-store-operations","title":"Common Data Store Operations","text":"<ol> <li>Import: Load CSV, JSON, database tables into SQLite</li> <li>Transform: Use SQL for data transformations</li> <li>Export: Output to PostgreSQL, ADX, files, etc.</li> <li>Query: Interactive SQL queries during development</li> </ol>"},{"location":"tutorials/solution/coal/#integration-with-run-templates","title":"Integration with Run Templates","text":""},{"location":"tutorials/solution/coal/#using-coal-commands","title":"Using CoAL Commands","text":"<p>Replace complex custom code with standardized commands: - Use <code>csm data run-load-data</code> instead of custom data fetching - Use data store commands for intermediate processing - Use export commands for final data output</p> <p>[Placeholder: Before/after example showing custom code vs CoAL commands]</p>"},{"location":"tutorials/solution/coal/#template-acceleration","title":"Template Acceleration","text":"<p>CoAL templates provide shortcuts for common operations: - fetch-data: Standard data download template - send-to-adx: Export results to Azure Data Explorer - validate-data: Common validation patterns</p>"},{"location":"tutorials/solution/coal/#cloud-service-integration","title":"Cloud Service Integration","text":""},{"location":"tutorials/solution/coal/#azure-services","title":"Azure Services","text":"<ul> <li>Blob Storage: File storage and retrieval</li> <li>Data Explorer (ADX): Analytics database operations</li> <li>Functions: Integration capabilities</li> </ul>"},{"location":"tutorials/solution/coal/#aws-services","title":"AWS Services","text":"<ul> <li>S3: Object storage (including ECS compatibility for Dell)</li> <li>Authentication: IAM and credential management</li> </ul>"},{"location":"tutorials/solution/coal/#api-integration","title":"API Integration","text":"<ul> <li>CosmoTech API: Simplified platform API access</li> <li>Authentication: Automatic token management</li> <li>Error Handling: Robust error management and retry logic</li> </ul>"},{"location":"tutorials/solution/coal/#development-workflow","title":"Development Workflow","text":""},{"location":"tutorials/solution/coal/#fast-cli-loading","title":"Fast CLI Loading","text":"<p>CoAL uses lazy loading: - CLI loads quickly by importing modules only when needed - Individual commands load their dependencies at runtime - Improves responsiveness for frequent CLI usage</p>"},{"location":"tutorials/solution/coal/#local-development","title":"Local Development","text":"<ul> <li>Test CoAL operations locally with same environment as production</li> <li>Use data store for iterative development</li> <li>Validate with real data before deployment</li> </ul>"},{"location":"tutorials/solution/coal/#library-organization","title":"Library Organization","text":"<p>CoAL is organized into functional modules: - AWS: Amazon service integrations (S3) - Azure: Azure service integrations (ADX, Blob, Functions) - CosmoTech API: Platform API wrappers - Data Store: SQLite database operations - PostgreSQL: Database connectivity - Utils: Helper functions and utilities</p>"},{"location":"tutorials/solution/coal/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/solution/coal/#performance","title":"Performance","text":"<ul> <li>Use data store for intermediate processing instead of files</li> <li>Leverage SQL for data transformations</li> <li>Use batch operations for large datasets</li> <li>Cache frequently accessed data</li> </ul>"},{"location":"tutorials/solution/coal/#code-organization","title":"Code Organization","text":"<ul> <li>Use CoAL commands instead of custom implementations</li> <li>Standardize on CoAL patterns across projects</li> <li>Document any custom extensions</li> <li>Keep custom code minimal</li> </ul>"},{"location":"tutorials/solution/coal/#error-handling","title":"Error Handling","text":"<ul> <li>Leverage CoAL's built-in error handling</li> <li>Use proper logging for debugging</li> <li>Implement appropriate retry logic</li> <li>Handle network timeouts gracefully</li> </ul>"},{"location":"tutorials/solution/coal/#migration-from-custom-code","title":"Migration from Custom Code","text":"<p>When adopting CoAL: 1. Identify Patterns: Find operations that match CoAL capabilities 2. Replace Gradually: Migrate one operation at a time 3. Test Thoroughly: Ensure equivalent functionality 4. Update Documentation: Document CoAL usage patterns</p>"},{"location":"tutorials/solution/coal/#platform-evolution","title":"Platform Evolution","text":"<p>CoAL evolves with the platform: - API Changes: CoAL adapts to new API versions - New Services: New integrations added over time - Backward Compatibility: Maintains compatibility across versions</p>"},{"location":"tutorials/solution/coal/#further-reading","title":"Further Reading","text":""},{"location":"tutorials/solution/csm-orc/","title":"CSM-ORC","text":"<p>Learn about the CosmoTech Orchestrator and its integration in your solution.</p>"},{"location":"tutorials/solution/csm-orc/#overview","title":"Overview","text":"<p>The CosmoTech Orchestrator (CSM-ORC) is the tool that executes run templates defined in JSON format. It orchestrates the different steps in your solution workflow, from data fetching to simulation execution and result processing.</p>"},{"location":"tutorials/solution/csm-orc/#what-is-csm-orc","title":"What is CSM-ORC?","text":"<p>CSM-ORC allows you to:</p> <ul> <li>Define workflows through JSON-based run templates</li> <li>Execute steps in a controlled order with dependencies</li> <li>Use environment variables for configuration</li> <li>Create reusable command templates</li> <li>Run the same workflow locally and in production</li> </ul>"},{"location":"tutorials/solution/csm-orc/#basic-run-template-structure","title":"Basic Run Template Structure","text":"<p>A run template is a JSON file that defines:</p> <ul> <li>Steps: Individual operations to execute</li> <li>Precedents: Dependencies between steps (which steps must complete before others)</li> <li>Environment Variables: Configuration values</li> <li>Commands: What to execute in each step</li> </ul> <p>[Placeholder: Basic JSON example showing steps with precedents]</p>"},{"location":"tutorials/solution/csm-orc/#key-concepts-from-the-meetings","title":"Key Concepts from the Meetings","text":""},{"location":"tutorials/solution/csm-orc/#step-dependencies","title":"Step Dependencies","text":"<ul> <li>Steps with precedents wait for other steps to complete</li> <li>Steps with the same precedents run in parallel</li> <li>No circular dependencies allowed</li> </ul>"},{"location":"tutorials/solution/csm-orc/#environment-variables","title":"Environment Variables","text":"<p>The platform provides standard variables like:</p> <ul> <li><code>COSMOTECH_API_URL</code></li> <li><code>CSM_ORGANIZATION_ID</code></li> <li><code>CSM_WORKSPACE_ID</code></li> <li><code>CSM_RUNNER_ID</code></li> <li><code>CSM_SIMULATION_ID</code></li> </ul>"},{"location":"tutorials/solution/csm-orc/#command-templates","title":"Command Templates","text":"<p>Instead of repeating complex commands, use command IDs that reference predefined templates:</p> <p>[Placeholder: JSON showing commandId usage vs full command]</p>"},{"location":"tutorials/solution/csm-orc/#cli-usage","title":"CLI Usage","text":""},{"location":"tutorials/solution/csm-orc/#basic-commands","title":"Basic Commands","text":"<ul> <li><code>csm-orc run template.json</code> - Execute a run template</li> <li><code>csm-orc run --dry-run template.json</code> - Validate without executing</li> <li><code>csm-orc run --display-env --gen-env-target file.env template.json</code> - Generate environment file</li> <li><code>csm-orc list-templates</code> - Show available command templates</li> </ul>"},{"location":"tutorials/solution/csm-orc/#local-development","title":"Local Development","text":"<p>Use <code>csm exec</code> to set up environment variables, then run templates locally with the same environment as production.</p>"},{"location":"tutorials/solution/csm-orc/#advanced-features","title":"Advanced Features","text":""},{"location":"tutorials/solution/csm-orc/#exit-handlers","title":"Exit Handlers","text":"<p>Steps that always run at the end, regardless of success or failure. Useful for cleanup operations.</p>"},{"location":"tutorials/solution/csm-orc/#data-transfer-between-steps","title":"Data Transfer Between Steps","text":"<p>Modern orchestrator versions support passing data between steps using outputs and inputs.</p> <p>[Placeholder: JSON showing step outputs and inputs configuration]</p>"},{"location":"tutorials/solution/csm-orc/#integration-with-docker","title":"Integration with Docker","text":"<p>When building Docker images, CSM-ORC serves as the entry point. The platform automatically provides environment variables when running containers.</p>"},{"location":"tutorials/solution/csm-orc/#best-practices","title":"Best Practices","text":"<ul> <li>Use meaningful step names</li> <li>Use command templates for repeated operations</li> <li>Test locally before deploying</li> </ul>"},{"location":"tutorials/solution/csm-orc/#further-reading","title":"Further Reading","text":""},{"location":"tutorials/solution/custom-commands/","title":"Custom commands","text":"<p>Define and use custom commands for advanced operations in your solution.</p>"},{"location":"tutorials/solution/custom-commands/#overview","title":"Overview","text":"<p>Custom commands allow you to create reusable command templates that can be referenced by ID instead of repeating complex command definitions. They help reduce code duplication and create standardized operations across run templates.</p>"},{"location":"tutorials/solution/custom-commands/#what-are-custom-commands","title":"What are Custom Commands?","text":"<p>Custom commands are: - Command Templates: Reusable command definitions with parameters - Command IDs: Named references instead of full command definitions - Plugin Extensions: Extend orchestrator functionality - Template System: Parameterized command structures</p>"},{"location":"tutorials/solution/custom-commands/#command-vs-command-id","title":"Command vs Command ID","text":""},{"location":"tutorials/solution/custom-commands/#direct-commands","title":"Direct Commands","text":"<p>Full command definition in run template: <pre><code>{\n  \"command\": \"python\",\n  \"arguments\": [\"script.py\", \"--param\", \"value\"],\n  \"environment\": {\"VAR\": \"value\"}\n}\n</code></pre></p>"},{"location":"tutorials/solution/custom-commands/#command-ids","title":"Command IDs","text":"<p>Reference to predefined template: <pre><code>{\n  \"commandId\": \"my-custom-command\"\n}\n</code></pre></p> <p>[Placeholder: JSON showing commandId vs full command comparison]</p>"},{"location":"tutorials/solution/custom-commands/#creating-custom-commands","title":"Creating Custom Commands","text":""},{"location":"tutorials/solution/custom-commands/#plugin-structure","title":"Plugin Structure","text":"<p>Custom commands are organized in plugins: - Plugin Directory: <code>cosmotech/orchestrator_plugins/</code> - Template Files: JSON files defining command templates - Manifest: Plugin metadata and configuration</p> <p>[Placeholder: Plugin directory structure example]</p>"},{"location":"tutorials/solution/custom-commands/#basic-template-definition","title":"Basic Template Definition","text":"<p>A command template includes: - ID: Unique identifier for the command - Description: Human-readable description - Command: The actual command to execute - Arguments: Parameter templates - Environment: Environment variable definitions</p> <p>[Placeholder: Basic command template JSON structure]</p>"},{"location":"tutorials/solution/custom-commands/#template-system","title":"Template System","text":""},{"location":"tutorials/solution/custom-commands/#variable-substitution","title":"Variable Substitution","text":"<p>Templates support parameter substitution: - Use variables in command arguments - Environment variable replacement - Default values for parameters - Required vs optional parameters</p> <p>[Placeholder: Template with variable substitution example]</p>"},{"location":"tutorials/solution/custom-commands/#plugin-loading","title":"Plugin Loading","text":"<p>Based on the meetings: - Plugins are loaded alphabetically - Local templates override library templates - Use <code>csm-orc list-templates</code> to see available templates - Templates can be distributed as Python packages</p>"},{"location":"tutorials/solution/custom-commands/#common-template-patterns","title":"Common Template Patterns","text":""},{"location":"tutorials/solution/custom-commands/#data-processing-templates","title":"Data Processing Templates","text":"<p>Common patterns include: - fetch-data: Standard data download operations - validate-data: Data validation steps - transform-data: Data transformation operations - send-to-storage: Export to various storage systems</p>"},{"location":"tutorials/solution/custom-commands/#utility-templates","title":"Utility Templates","text":"<ul> <li>hello-world: Simple example template</li> <li>python-script: Execute Python scripts with parameters</li> <li>file-operations: Common file manipulation tasks</li> </ul> <p>[Placeholder: Example template definitions for common patterns]</p>"},{"location":"tutorials/solution/custom-commands/#advanced-features","title":"Advanced Features","text":""},{"location":"tutorials/solution/custom-commands/#exit-handlers","title":"Exit Handlers","text":"<p>Templates can be marked as exit handlers: - Always run at the end regardless of success/failure - Useful for cleanup operations - Send notifications or status updates - Handle error conditions</p> <p>[Placeholder: Exit handler template example]</p>"},{"location":"tutorials/solution/custom-commands/#template-parameters","title":"Template Parameters","text":"<p>Templates support various parameter types: - Environment Variables: Runtime configuration - Command Arguments: Direct parameter passing - Optional Parameters: Parameters with defaults - Required Parameters: Must be provided</p>"},{"location":"tutorials/solution/custom-commands/#plugin-development","title":"Plugin Development","text":""},{"location":"tutorials/solution/custom-commands/#creating-plugin-packages","title":"Creating Plugin Packages","text":"<p>Structure plugin packages for distribution: - Python Package: Standard package structure - Entry Points: Define plugin entry points - Installation: Install as pip package - Version Management: Semantic versioning</p> <p>[Placeholder: Plugin package structure example]</p>"},{"location":"tutorials/solution/custom-commands/#local-vs-distributed-plugins","title":"Local vs Distributed Plugins","text":"<ul> <li>Local Plugins: Project-specific templates</li> <li>Distributed Plugins: Shared across projects</li> <li>Installation Methods: pip install, local development</li> <li>Namespace Management: Avoid naming conflicts</li> </ul>"},{"location":"tutorials/solution/custom-commands/#integration-with-coal","title":"Integration with CoAL","text":"<p>CoAL provides many standard templates: - CSM Data Templates: Data operation shortcuts - Storage Templates: Upload/download operations - API Templates: Platform API interactions - Database Templates: Database operation shortcuts</p>"},{"location":"tutorials/solution/custom-commands/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/solution/custom-commands/#template-design","title":"Template Design","text":"<ul> <li>Use clear, descriptive IDs</li> <li>Provide comprehensive descriptions</li> <li>Design for reusability</li> <li>Handle errors gracefully</li> </ul>"},{"location":"tutorials/solution/custom-commands/#parameter-management","title":"Parameter Management","text":"<ul> <li>Use environment variables for configuration</li> <li>Provide sensible defaults</li> <li>Validate required parameters</li> <li>Document parameter usage</li> </ul>"},{"location":"tutorials/solution/custom-commands/#plugin-organization","title":"Plugin Organization","text":"<ul> <li>Group related templates in plugins</li> <li>Use consistent naming conventions</li> <li>Maintain backward compatibility</li> <li>Document template APIs</li> </ul>"},{"location":"tutorials/solution/custom-commands/#development-workflow","title":"Development Workflow","text":""},{"location":"tutorials/solution/custom-commands/#local-development","title":"Local Development","text":"<ol> <li>Create Template: Define command template JSON</li> <li>Create Plugin: Organize in plugin structure</li> <li>Install Locally: Install as editable package</li> <li>Test: Use in run templates</li> <li>Iterate: Refine and improve</li> </ol>"},{"location":"tutorials/solution/custom-commands/#testing-templates","title":"Testing Templates","text":"<ul> <li>Use <code>csm-orc list-templates</code> to verify availability</li> <li>Test with various parameter combinations</li> <li>Validate error handling</li> <li>Check integration with run templates</li> </ul>"},{"location":"tutorials/solution/custom-commands/#template-distribution","title":"Template Distribution","text":""},{"location":"tutorials/solution/custom-commands/#packaging","title":"Packaging","text":"<ul> <li>Create Python package with proper structure</li> <li>Include manifest and metadata</li> <li>Use semantic versioning</li> <li>Provide documentation and examples</li> </ul>"},{"location":"tutorials/solution/custom-commands/#installation","title":"Installation","text":"<ul> <li>Install from Git repositories</li> <li>Use pip for package management</li> <li>Support development installations</li> <li>Handle dependencies properly</li> </ul>"},{"location":"tutorials/solution/custom-commands/#further-reading","title":"Further Reading","text":""},{"location":"tutorials/solution/custom-library/","title":"Custom library","text":"<p>Integrate and use custom libraries in your CosmoTech solution.</p>"},{"location":"tutorials/solution/custom-library/#overview","title":"Overview","text":"<p>Custom libraries allow you to create reusable code components for your CosmoTech solutions. They help avoid code duplication, encapsulate domain-specific logic, and create shared functionality across run templates and projects.</p>"},{"location":"tutorials/solution/custom-library/#what-are-custom-libraries","title":"What are Custom Libraries?","text":"<p>Custom libraries are: - Reusable Code Modules: Common functions and classes - Project-Specific Logic: Business logic for your domain - Shared Components: Code used across multiple solutions - Helper Functions: Utilities for common operations</p>"},{"location":"tutorials/solution/custom-library/#types-of-custom-libraries","title":"Types of Custom Libraries","text":"<p>Based on the meetings, you can create: - Solution Libraries: Specific to your project (like Supply Chain Python Library) - Common Libraries: Shared utilities within a solution - External Libraries: Separate repositories with their own lifecycle - In-Project Libraries: Located within the solution structure</p>"},{"location":"tutorials/solution/custom-library/#library-organization","title":"Library Organization","text":""},{"location":"tutorials/solution/custom-library/#directory-structure","title":"Directory Structure","text":"<p>Libraries can be organized in different ways: - External Repository: Separate Git repository (like Supply Chain Python Library) - Local Libraries: Within <code>run_templates</code> directory structure - Common Folder: Shared code in a <code>common</code> directory - Libs Directory: Dedicated <code>libs</code> folder for libraries</p> <p>[Placeholder: Directory structure showing library organization options]</p>"},{"location":"tutorials/solution/custom-library/#integration-methods","title":"Integration Methods","text":"<ul> <li>Requirements.txt: Reference external libraries</li> <li>Local Installation: Install from local paths</li> <li>Docker Build: Include in container image</li> <li>Direct Import: Import from solution directories</li> </ul>"},{"location":"tutorials/solution/custom-library/#creating-custom-libraries","title":"Creating Custom Libraries","text":""},{"location":"tutorials/solution/custom-library/#library-structure","title":"Library Structure","text":"<p>A typical custom library includes: - Python Package: Standard <code>__init__.py</code> and modules - Setup Configuration: <code>pyproject.toml</code> or <code>setup.py</code> - Documentation: README and API docs - Tests: Unit and integration tests</p> <p>[Placeholder: Example library structure]</p>"},{"location":"tutorials/solution/custom-library/#common-patterns","title":"Common Patterns","text":"<p>Libraries typically provide: - Simulation Helpers: Functions to run and process simulations - Data Processing: Transform and validate data - API Wrappers: Simplified interfaces to external services - Utility Functions: Common operations and helpers</p>"},{"location":"tutorials/solution/custom-library/#integration-with-run-templates","title":"Integration with Run Templates","text":""},{"location":"tutorials/solution/custom-library/#using-libraries-in-templates","title":"Using Libraries in Templates","text":"<p>Import and use custom libraries in run template scripts: - Set up proper import paths - Handle dependencies correctly - Use library functions in step implementations - Manage error handling and logging</p> <p>[Placeholder: Example showing library usage in run template]</p>"},{"location":"tutorials/solution/custom-library/#installation-in-docker","title":"Installation in Docker","text":"<p>When building Docker images: - Only content of <code>run_templates</code> is copied to container - External libraries must be in requirements or locally available - Local libraries should be within <code>run_templates</code> structure - Use pip install during Docker build process</p>"},{"location":"tutorials/solution/custom-library/#development-workflow","title":"Development Workflow","text":""},{"location":"tutorials/solution/custom-library/#local-development","title":"Local Development","text":"<ol> <li>Create Library: Set up Python package structure</li> <li>Develop Functions: Implement reusable functionality</li> <li>Test Locally: Unit test and integration test</li> <li>Install: Install in development environment</li> <li>Use in Templates: Import and use in run templates</li> </ol>"},{"location":"tutorials/solution/custom-library/#library-distribution","title":"Library Distribution","text":"<ul> <li>Private Repositories: Git-based distribution</li> <li>Local Installation: Direct pip install from source</li> <li>Container Inclusion: Package with Docker image</li> <li>Requirements Management: Version control and dependency management</li> </ul>"},{"location":"tutorials/solution/custom-library/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/solution/custom-library/#library-design","title":"Library Design","text":"<ul> <li>Single Responsibility: Each library has a clear purpose</li> <li>Clear Interfaces: Well-defined APIs and documentation</li> <li>Error Handling: Consistent error handling patterns</li> <li>Logging: Standardized logging throughout</li> </ul>"},{"location":"tutorials/solution/custom-library/#code-organization","title":"Code Organization","text":"<ul> <li>Keep libraries focused and modular</li> <li>Minimize dependencies between libraries</li> <li>Use meaningful names and documentation</li> <li>Follow Python packaging best practices</li> </ul>"},{"location":"tutorials/solution/custom-library/#version-management","title":"Version Management","text":"<ul> <li>Use semantic versioning for library releases</li> <li>Maintain compatibility across versions</li> <li>Document breaking changes</li> <li>Provide migration guides when needed</li> </ul>"},{"location":"tutorials/solution/custom-library/#example-supply-chain-library","title":"Example: Supply Chain Library","text":"<p>Based on the meetings, the Supply Chain solution uses: - External Repository: Separate Git repo for the library - Simulation Functions: Code to run simulations with data - Requirements Integration: Referenced in solution requirements - Reusable Components: Shared across multiple run templates</p> <p>[Placeholder: Example showing Supply Chain library integration]</p>"},{"location":"tutorials/solution/custom-library/#library-vs-common-code","title":"Library vs. Common Code","text":""},{"location":"tutorials/solution/custom-library/#when-to-use-libraries","title":"When to Use Libraries","text":"<ul> <li>Code used across multiple projects</li> <li>Complex functionality that needs testing</li> <li>Code that has its own release cycle</li> <li>Functionality that might be open-sourced</li> </ul>"},{"location":"tutorials/solution/custom-library/#when-to-use-common-folder","title":"When to Use Common Folder","text":"<ul> <li>Project-specific utilities</li> <li>Simple helper functions</li> <li>Code that changes frequently with the solution</li> <li>Quick prototyping and development</li> </ul>"},{"location":"tutorials/solution/custom-library/#integration-with-coal","title":"Integration with CoAL","text":"<p>Custom libraries often work alongside CoAL: - Extend CoAL: Add domain-specific functionality - Use CoAL: Leverage CoAL for common operations - Complement CoAL: Fill gaps in standard functionality - Standard Patterns: Follow CoAL conventions and patterns</p>"},{"location":"tutorials/solution/custom-library/#further-reading","title":"Further Reading","text":""},{"location":"tutorials/solution/etl/","title":"ETL","text":"<p>ETL processes for data transformation and loading in your solution.</p>"},{"location":"tutorials/solution/etl/#overview","title":"Overview","text":"<p>ETL (Extract, Transform, Load) run templates handle data processing workflows. They differ from simulation templates by focusing on data ingestion, transformation, and output to various storage systems rather than running simulations.</p>"},{"location":"tutorials/solution/etl/#what-are-etl-templates","title":"What are ETL Templates?","text":"<p>ETL templates are run templates specifically designed for: - Extract: Getting data from external sources - Transform: Converting data formats and structures - Load: Storing processed data in target systems</p>"},{"location":"tutorials/solution/etl/#key-differences-from-simulation-templates","title":"Key Differences from Simulation Templates","text":"<p>Based on the meetings, ETL templates: - Use the Runner API (newer) instead of Scenario API (legacy) - Are marked with <code>\"tags\": [\"data-source\"]</code> for web app integration - Focus on data processing rather than simulation execution - Often create datasets for later use in simulations</p>"},{"location":"tutorials/solution/etl/#api-versions-and-compatibility","title":"API Versions and Compatibility","text":""},{"location":"tutorials/solution/etl/#scenario-api-vs-runner-api","title":"Scenario API vs Runner API","text":"<ul> <li>Scenario API: Legacy approach (API v3.x, WebApp v6.x)</li> <li>Runner API: Modern approach (API v4.x+, WebApp v7.x+)</li> <li>Compatibility Code: Some solutions support both for transition</li> </ul> <p>[Placeholder: Code example showing API version switching]</p>"},{"location":"tutorials/solution/etl/#environment-variables","title":"Environment Variables","text":"<p>Different variables are provided: - Legacy: <code>CSM_SCENARIO_ID</code>, scenario-based variables - Modern: <code>CSM_RUNNER_ID</code>, runner-based variables</p>"},{"location":"tutorials/solution/etl/#etl-workflow-pattern","title":"ETL Workflow Pattern","text":"<p>Typical ETL workflow: 1. Download Data: Use <code>csm-data api run-load-data</code> or custom fetch 2. Transform: Convert Excel/CSV to standardized format 3. Validate: Check data quality and structure 4. Load: Send to Twin Data Layer, PostgreSQL, or other storage</p> <p>[Placeholder: JSON showing ETL step sequence]</p>"},{"location":"tutorials/solution/etl/#data-storage-options","title":"Data Storage Options","text":"<p>Based on the meetings, options include: - Twin Data Layer (TDL): Graph-based storage (being deprecated) - Workspace Files: Direct file upload to platform - PostgreSQL: Relational database storage - Azure Data Explorer (ADX): Analytics database - Custom Storage: S3, Azure Blob, etc.</p>"},{"location":"tutorials/solution/etl/#using-coal-for-etl","title":"Using CoAL for ETL","text":"<p>The CosmoTech Acceleration Library provides: - <code>csm-data</code> commands for common operations - Data store (SQLite) for intermediate processing - Standard connectors for various services</p> <p>[Placeholder: Example using csm data commands]</p>"},{"location":"tutorials/solution/etl/#web-app-integration","title":"Web App Integration","text":"<p>ETL templates appear in the web app: - Data Source Templates: Tagged for dataset creation - Create Dataset: Runs ETL to generate new datasets - Dataset Selection: Results can be used in simulations</p>"},{"location":"tutorials/solution/etl/#common-etl-patterns","title":"Common ETL Patterns","text":""},{"location":"tutorials/solution/etl/#excel-to-csv-transformation","title":"Excel to CSV Transformation","text":"<ol> <li>Upload Excel file via web app</li> <li>ETL reads and processes Excel data</li> <li>Output standardized CSV files</li> <li>Create dataset for simulation use</li> </ol>"},{"location":"tutorials/solution/etl/#api-data-integration","title":"API Data Integration","text":"<ol> <li>Fetch data from external APIs</li> <li>Transform to required format</li> <li>Store in platform-compatible format</li> <li>Make available for scenarios</li> </ol>"},{"location":"tutorials/solution/etl/#local-development","title":"Local Development","text":"<p>Test ETL templates locally: - Use same environment variables as production - Test with sample data files - Validate output formats</p>"},{"location":"tutorials/solution/etl/#best-practices","title":"Best Practices","text":"<ul> <li>Design for data validation at each step</li> <li>Handle errors gracefully</li> <li>Use intermediate storage (data store) for complex transformations</li> <li>Test with various data sizes</li> <li>Implement proper logging for debugging</li> </ul>"},{"location":"tutorials/solution/etl/#migration-considerations","title":"Migration Considerations","text":"<p>When moving from Scenario to Runner API: - Update environment variable references - Change API endpoints in custom code - Test compatibility with both web app versions</p>"},{"location":"tutorials/solution/etl/#further-reading","title":"Further Reading","text":""},{"location":"tutorials/solution/run-templates/","title":"Run templates","text":"<p>How to use and configure run templates for your solution.</p>"},{"location":"tutorials/solution/run-templates/#overview","title":"Overview","text":"<p>Run templates are JSON files that define the workflow for your CosmoTech solution. They orchestrate data processing, simulation execution, and result handling by defining a sequence of steps with dependencies.</p>"},{"location":"tutorials/solution/run-templates/#what-are-run-templates","title":"What are Run Templates?","text":"<p>Run templates define: - Execution Steps: Individual operations like data fetch, validation, simulation - Step Order: Using precedents to control execution sequence - Environment: Variables and parameters for configuration - Commands: What gets executed in each step</p>"},{"location":"tutorials/solution/run-templates/#basic-structure","title":"Basic Structure","text":"<p>A run template contains: - Steps: Named operations with commands and arguments - Precedents: Define which steps must complete before others start - Environment Variables: Configuration and data passing - Templates: Reusable command definitions</p> <p>[Placeholder: Basic JSON structure with steps and precedents]</p>"},{"location":"tutorials/solution/run-templates/#key-concepts-from-the-meetings","title":"Key Concepts from the Meetings","text":""},{"location":"tutorials/solution/run-templates/#step-dependencies","title":"Step Dependencies","text":"<ul> <li>Sequential: Steps run one after another using precedents</li> <li>Parallel: Steps with same precedents run simultaneously</li> <li>No Cycles: Circular dependencies are not allowed</li> </ul> <p>Example workflow: fetch data \u2192 validate \u2192 run simulation \u2192 post-process</p>"},{"location":"tutorials/solution/run-templates/#environment-variables","title":"Environment Variables","text":"<p>Standard platform variables include: - Data paths and scenario information - API connection details - Workspace configuration</p>"},{"location":"tutorials/solution/run-templates/#command-templates-vs-direct-commands","title":"Command Templates vs Direct Commands","text":"<ul> <li>Direct Commands: Full command definition in the template</li> <li>Command IDs: Reference to predefined command templates</li> <li>Templates: Reduce duplication and improve maintainability</li> </ul> <p>[Placeholder: Example showing commandId vs full command definition]</p>"},{"location":"tutorials/solution/run-templates/#types-of-run-templates","title":"Types of Run Templates","text":"<p>Based on the meetings, there are different types: - Simulation Templates: Execute digital twin simulations - ETL Templates: Extract, transform, and load data - Validation Templates: Data quality checks - Processing Templates: Custom data workflows</p>"},{"location":"tutorials/solution/run-templates/#integration-with-simulators","title":"Integration with Simulators","text":"<p>Run templates integrate with CosmoTech simulators by: - Calling <code>csm simulate</code> command with simulation files - Using environment variables for configuration - Processing simulation outputs</p> <p>[Placeholder: Example showing simulator integration step]</p>"},{"location":"tutorials/solution/run-templates/#environment-and-parameters","title":"Environment and Parameters","text":""},{"location":"tutorials/solution/run-templates/#standard-environment-variables","title":"Standard Environment Variables","text":"<p>The platform provides variables for: - Scenario/Runner identification - File paths (<code>/mnt/scenariorun-data</code>) - API connection information</p>"},{"location":"tutorials/solution/run-templates/#parameter-passing","title":"Parameter Passing","text":"<ul> <li>Environment Variables: System-level configuration</li> <li>Command Arguments: Direct parameter passing</li> <li>File-based: Configuration files and data files</li> </ul>"},{"location":"tutorials/solution/run-templates/#local-development","title":"Local Development","text":""},{"location":"tutorials/solution/run-templates/#running-locally","title":"Running Locally","text":"<ol> <li>Set up the same environment variables as production</li> <li>Use <code>csm-orc run template.json</code> to execute</li> <li>Use <code>--dry-run</code> for validation without execution</li> </ol>"},{"location":"tutorials/solution/run-templates/#environment-files","title":"Environment Files","text":"<ul> <li>Generate environment files from templates</li> <li>Use for consistent local development</li> <li>Match production environment setup</li> </ul>"},{"location":"tutorials/solution/run-templates/#advanced-features","title":"Advanced Features","text":""},{"location":"tutorials/solution/run-templates/#exit-handlers","title":"Exit Handlers","text":"<p>Steps that always execute at the end, regardless of success/failure. Useful for: - Cleanup operations - Sending notifications - Logging completion status</p>"},{"location":"tutorials/solution/run-templates/#data-transfer-between-steps","title":"Data Transfer Between Steps","text":"<p>Modern versions support passing data between steps: - Outputs: Data produced by a step - Inputs: Data consumed by a step - Replaces file-based data sharing</p> <p>[Placeholder: JSON showing outputs/inputs configuration]</p>"},{"location":"tutorials/solution/run-templates/#best-practices","title":"Best Practices","text":"<ul> <li>Use clear, descriptive step names</li> <li>Minimize dependencies for better parallelization</li> <li>Use command templates for repeated operations</li> <li>Test locally before deploying</li> <li>Implement proper error handling with exit handlers</li> </ul>"},{"location":"tutorials/solution/run-templates/#integration-with-platform","title":"Integration with Platform","text":""},{"location":"tutorials/solution/run-templates/#api-integration","title":"API Integration","text":"<ul> <li>Templates integrate with CosmoTech API</li> <li>Use runner API for modern templates</li> <li>Handle authentication automatically</li> </ul>"},{"location":"tutorials/solution/run-templates/#docker-deployment","title":"Docker Deployment","text":"<ul> <li>Templates run in containerized environments</li> <li>Same environment variables in local and production</li> <li>Container serves as execution environment</li> </ul>"},{"location":"tutorials/solution/run-templates/#further-reading","title":"Further Reading","text":""},{"location":"tutorials/web-app/","title":"Web App","text":"<p>This section covers all aspects of working with the CosmoTech Web Application.</p> <p> Frontend</p> <p>Learn about the frontend architecture and customization.</p> <p> Frontend</p> <p> ADX database</p> <p>Integrate and manage the ADX database for your web app.</p> <p> ADX database</p> <p> Power BI</p> <p>Embed and use Power BI dashboards in your web application.</p> <p> Power BI</p>"},{"location":"tutorials/web-app/adx-database/","title":"ADX Database Overview","text":"<p>This page introduces how the web-app consumes data from Azure Data Explorer (ADX) and how to structure your data estate for analytics &amp; dashboards.</p>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#1-why-adx-for-the-solution","title":"1. Why ADX for the Solution?","text":"<ul> <li>Sub-second exploratory analytics on time-series &amp; events</li> <li>Native integration with Power BI (DirectQuery / import) and Azure ecosystem</li> <li>Scalable ingestion &amp; retention policies</li> </ul>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#2-high-level-flow","title":"2. High-Level Flow","text":"<pre><code>Sources -&gt; Ingestion (EventHub / Blob / ADX LightIngest) -&gt; Raw Tables -&gt; Update Policies / Materialized Views -&gt; Serving Functions -&gt; Power BI / API\n</code></pre>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#3-core-concepts","title":"3. Core Concepts","text":"Concept Description Example Table Physically stored records <code>BrewerEvents</code> Ingestion Mapping Column mapping from source payload JSON mapping for brewer events Update Policy Auto-populate derived table Raw -&gt; Cleaned table Materialized View Pre-computed aggregation 15-min brew KPIs Function Reusable query logic <code>GetBrewEvents()</code>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#4-recommended-table-design","title":"4. Recommended Table Design","text":"Column Type Purpose Naming Timestamp Query time axis <code>Timestamp</code> first column Entity Keys Filter dimensions <code>Site</code>, <code>BatchId</code>, <code>Product</code> Measures Numeric metrics <code>DurationSeconds</code>, <code>Temperature</code> Status / Type Categorical attributes <code>EventType</code> <p>Partitioning automatically by ingestion time\u2014optimize retention with policies:</p> <pre><code>.alter table BrewerEvents policy retention softdelete = 30d\");\n</code></pre>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#5-ingestion-tips","title":"5. Ingestion Tips","text":"<ul> <li>Batch ingestion for historical loads; streaming/EventHub for near real-time</li> <li>Validate schema with a staging table before merging</li> <li>Compress JSON payloads or prefer CSV/Parquet for large volume</li> </ul>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#6-serving-functions","title":"6. Serving Functions","text":"<p>All dashboard/API queries should route via serving functions (see: ADX Functions &amp; Performance).</p> <p>Benefits: - Centralize filter logic - Enforce parameter contracts - Reduce duplication across Power BI &amp; services</p>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#7-governance-source-control","title":"7. Governance &amp; Source Control","text":"<p>Store Kusto artifacts (<code>tables.kql</code>, <code>functions/*.kql</code>, <code>policies.kql</code>) under version control. Deploy via CI using Azure CLI or ARM scripts.</p>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#8-observability","title":"8. Observability","text":"<p>Use built-in commands: <pre><code>.show table BrewerEvents details\n.show queries | where StartedOn &gt; ago(15m)\n.show operations | where StartedOn &gt; ago(1h) and Status != 'Completed'\n</code></pre></p>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-database/#9-next","title":"9. Next","text":"<p>Proceed to implementing reusable functions and performance tuning.</p> <p>See: Functions &amp; Performance</p>","tags":["adx","data","web-app"]},{"location":"tutorials/web-app/adx-functions-performance/","title":"ADX Functions &amp; Performance","text":"<p>This guide shows how to encapsulate logic into Azure Data Explorer (ADX) functions and optimize query performance for responsive dashboards.</p> <p>Focus areas: 1. Reuse logic across dashboards &amp; web-app deployments 2. Reduce data scanned &amp; transferred to Power BI 3. Improve freshness vs cost balance 4. Make parameters first-class citizens</p>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#1-organize-your-adx-layer","title":"1. Organize Your ADX Layer","text":"Layer Purpose Artifacts Raw ingestion Land data as-is Ingestion mappings, staging tables Harmonized Cleaned, typed, conformed Update policies, materialized views Serving Query-ready, thin, parameterizable Functions, export tables <p>Keep functions in a dedicated folder in source control (e.g. <code>infrastructure/adx/functions/</code>). Version them and deploy declaratively (ARM/Bicep/Terraform / Kusto scripts).</p>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#2-defining-functions","title":"2. Defining Functions","text":"<p>Two main kinds: - Inline (lightweight) functions - Stored functions created once in the database</p> <p>Example: <code>GetBrewEvents(startTime:datetime, endTime:datetime, site:string)</code></p> <pre><code>.create-or-alter function with (docstring = 'Brew events filtered by time &amp; site', folder='serving/brew')\nGetBrewEvents(startTime:datetime, endTime:datetime, site:string)\n{\n    BrewerEvents\n    | where Timestamp between (startTime .. endTime)\n    | where Site == site\n    | project Timestamp, Site, BatchId, EventType, DurationSeconds\n}\n</code></pre>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#best-practices","title":"Best Practices","text":"<ul> <li>Use PascalCase for function names, camelCase for parameters.</li> <li>Provide <code>docstring</code> and <code>folder</code> for discoverability.</li> <li>Avoid hard-coded constants; expose as parameters.</li> </ul>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#3-composing-functions","title":"3. Composing Functions","text":"<p>Create small focused functions and compose:</p> <pre><code>// Base filter\n.create-or-alter function GetBatches(startTime:datetime, endTime:datetime){\n  Batches | where StartTime between (startTime .. endTime)\n          | project BatchId, Product, StartTime, EndTime\n}\n\n// Duration enrichment\n.create-or-alter function GetBatchDurations(startTime:datetime, endTime:datetime){\n  GetBatches(startTime, endTime)\n  | extend DurationMinutes = datetime_diff('minute', EndTime, StartTime)\n}\n\n// Aggregated KPI\n.create-or-alter function GetOutputKPI(startTime:datetime, endTime:datetime){\n  GetBatchDurations(startTime, endTime)\n  | summarize AvgDuration = avg(DurationMinutes), TotalBatches = count()\n}\n</code></pre>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#4-parameter-patterns-for-power-bi","title":"4. Parameter Patterns for Power BI","text":"<p>When embedding, the web-app can compute a time window &amp; site, then pass them as query parameters.</p> <p>Pattern: a single root function that accepts all Power BI-relevant parameters and outputs a narrow dataset.</p> <pre><code>.create-or-alter function Dashboard_Fact(startTime:datetime, endTime:datetime, site:string, product:string){\n  GetBrewEvents(startTime, endTime, site)\n  | where product == '' or Product == product\n  | summarize Events=count(), TotalDuration=sum(DurationSeconds)\n}\n</code></pre> <p>In Power BI M query (parameterized):</p> <pre><code>let\n    StartTime = DateTimeZone.UtcNow() - #duration(0,12,0,0),\n    EndTime = DateTimeZone.UtcNow(),\n    Site = Text.From(EnvSiteParameter),\n    Product = \"\" ,\n    Source = Kusto.Contents(\"https://&lt;cluster&gt;.&lt;region&gt;.kusto.windows.net\", \"&lt;database&gt;\", \n        \"Dashboard_Fact(datetime({\" &amp; DateTimeZone.ToText(StartTime, \"yyyy-MM-dd HH:mm:ss\") &amp; \"}), datetime({\" &amp; DateTimeZone.ToText(EndTime, \"yyyy-MM-dd HH:mm:ss\") &amp; \"}), '\" &amp; Site &amp; \"', '\" &amp; Product &amp; \"')\")\nin\n    Source\n</code></pre> <p>(Replace the dynamic site &amp; product with actual PBI parameters linked to slicers.)</p>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#5-performance-tactics","title":"5. Performance Tactics","text":"Goal Tactic Notes Min scan Use narrower projection early Always <code>project</code> right after filters Fast filter Use ingestion time partitioning &amp; <code>between</code> Align queries to partition keys Reuse Materialized views For heavy joins/expensive lookups Lower transfer Summarize before export to PBI Return aggregated rows, not raw events Adaptive freshness Tiered functions (raw vs MV) Switch via a boolean parameter","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#example-hybrid-live-historical","title":"Example: Hybrid Live + Historical","text":"<pre><code>.create-or-alter function Dashboard_Fact_Live(startAgo:timespan, site:string){\n  GetBrewEvents(now()-startAgo, now(), site)\n}\n\n.create-or-alter function Dashboard_Fact_History(startTime:datetime, endTime:datetime, site:string){\n  Materialized_BrewAgg\n  | where WindowStart between (startTime .. endTime)\n  | where Site == site\n}\n\n.create-or-alter function Dashboard_Fact_Union(startTime:datetime, endTime:datetime, liveAgo:timespan, site:string){\n  union isfuzzy=true\n    (Dashboard_Fact_History(startTime, endTime, site))\n    (Dashboard_Fact_Live(liveAgo, site))\n  | summarize Events=sum(Events), TotalDuration=sum(TotalDuration)\n}\n</code></pre>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#6-monitoring-diagnostics","title":"6. Monitoring &amp; Diagnostics","text":"<pre><code>.show functions\n.show commands-and-queries | where StartedOn &gt; ago(1h)\n</code></pre> <p>Enable Query Store &amp; alerts for: - Long-running queries &gt; 15s - High data scanned vs returned ratio</p>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#7-deployment-automation","title":"7. Deployment Automation","text":"<p>Store function definitions as <code>.kql</code> files and apply idempotently:</p> <pre><code>#!/usr/bin/env bash\nfor f in infrastructure/adx/functions/*.kql; do\n  echo \"Applying $f\";\n  az kusto script create --cluster-name $CLUSTER --database-name $DB --name $(basename $f .kql) --script-content \"$(cat $f)\" --force-update-tag $(date +%s);\ndone\n</code></pre>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#8-checklist","title":"8. Checklist","text":"<ul> <li> All dashboard queries go through a root serving function</li> <li> Parameters documented (name, type, default)</li> <li> Functions have docstrings &amp; folder metadata</li> <li> Query completion p50 &lt; 3s</li> <li> No function returns &gt; 100k rows to Power BI</li> <li> Materialized views used for joins &gt; 10M rows</li> </ul>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/adx-functions-performance/#9-next-steps","title":"9. Next Steps","text":"<p>Continue with Power BI parameterization to bind these functions to dynamic dashboards.</p> <p>See: Power BI Parameters &amp; Reuse</p>","tags":["adx","performance","web-app","optimization"]},{"location":"tutorials/web-app/frontend/","title":"Frontend Architecture &amp; Integration","text":"<p>The frontend orchestrates context (site, user, time window), passes parameters to embedded analytics, and optimizes perceived performance.</p>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#1-layers","title":"1. Layers","text":"Layer Responsibility Tech Routing Page/screen selection React Router / framework router State Global context (site, auth, feature flags) Redux / Zustand / Context API Services REST / GraphQL / ADX proxy calls Fetch / Axios Embedding Power BI iframe + SDK <code>powerbi-client</code> Components UI widgets / filters / charts Design system","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#2-parameter-propagation-flow","title":"2. Parameter Propagation Flow","text":"<pre><code>User selects Site -&gt; Global State update -&gt; ADX function queries (server) &amp; Embed Filters (client) -&gt; Report visuals refresh\n</code></pre> <p>Core rule: single source of truth for each parameter (avoid duplicate local state).</p>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#3-environment-configuration","title":"3. Environment Configuration","text":"<p>Expose environment via <code>.env</code> or config endpoint:</p> Variable Purpose <code>PBI_AUTH_MODE</code> <code>service-principal</code> / <code>user</code> <code>PBI_BACKEND_TOKEN_URL</code> Token fetch endpoint <code>ADX_CLUSTER_URL</code> Display / debugging <code>DEFAULT_SITE</code> Initial filter","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#4-fetching-embed-token","title":"4. Fetching Embed Token","text":"<pre><code>async function fetchEmbedToken(reportId: string) {\n  const res = await fetch(`/api/powerbi/token?reportId=${reportId}` , { credentials: 'include' });\n  if (!res.ok) throw new Error('Token failed');\n  return res.json(); // { token, embedUrl, datasetId }\n}\n</code></pre>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#5-context-synchronization","title":"5. Context Synchronization","text":"<pre><code>const [site, setSite] = useState(initialSite);\nuseEffect(() =&gt; {\n  reportRef.current?.setFilters([\n    { $schema: 'http://powerbi.com/product/schema#basic', target: { table: 'SiteFilter', column: 'Site' }, operator: 'In', values: [site] }\n  ]);\n}, [site]);\n</code></pre>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#6-performance-optimizations","title":"6. Performance Optimizations","text":"Concern Mitigation Slow initial dashboard Lazy-load Power BI SDK &amp; use skeleton loaders Excess re-renders Memoize filter components &amp; avoid prop drilling Network chatter Debounce user input before triggering queries Large bundle Code-split embedding feature","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#7-error-handling-patterns","title":"7. Error Handling Patterns","text":"<pre><code>try {\n  const token = await fetchEmbedToken(reportId);\n  embedReport(container, { ...token, site });\n} catch (e) {\n  logError(e);\n  showToast('Unable to load analytics');\n}\n</code></pre> <p>Surface fallback UI with actionable steps (retry / contact support).</p>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#8-observability","title":"8. Observability","text":"<ul> <li>Custom performance marks (e.g. <code>analytics_loaded</code>)</li> <li>Track embed token latency</li> <li>Capture front-end errors (Sentry / App Insights)</li> </ul>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#9-security-hygiene","title":"9. Security Hygiene","text":"<ul> <li>Never store secrets in frontend bundle</li> <li>Validate all query parameter values server-side</li> <li>Sanitize user-entered strings passed to functions</li> </ul>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/frontend/#10-next","title":"10. Next","text":"<p>Proceed to ADX or Power BI deep dives:</p> <ul> <li>ADX Overview</li> <li>Power BI Overview</li> </ul>","tags":["frontend","web-app","power-bi","adx"]},{"location":"tutorials/web-app/power-bi-embedding/","title":"Power BI Embedding &amp; Security","text":"<p>This guide covers embedding models, authentication flows, Row Level Security (RLS), and performance tuning.</p>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#1-embedding-models","title":"1. Embedding Models","text":"Scenario Model Notes Internal users (AAD) User owns data Uses user AAD token; per-user RLS naturally applied External / multi-tenant Service principal App gets embed token; enforce tenant filter via RLS Public showcase Publish-to-web (avoid) Not secure; never use for production <p>Prefer service principal + embed token generation backend-side for multi-tenant.</p>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#2-architecture","title":"2. Architecture","text":"<pre><code>Browser -&gt; Web-App (frontend) -&gt; Backend (token endpoint) -&gt; AAD -&gt; Power BI Service\n                                           |\n                                           +--&gt; ADX (DirectQuery via PBI service)\n</code></pre>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#3-backend-generate-embed-token","title":"3. Backend: Generate Embed Token","text":"<p>Pseudo-code:</p> <pre><code>from msal import ConfidentialClientApplication\nimport requests\n\ndef get_embed_token(report_id, workspace_id, dataset_id):\n    app = ConfidentialClientApplication(\n        client_id=CLIENT_ID,\n        authority=f\"https://login.microsoftonline.com/{TENANT_ID}\",\n        client_credential=CLIENT_SECRET\n    )\n    scope = [\"https://analysis.windows.net/powerbi/api/.default\"]\n    result = app.acquire_token_silent(scope, account=None)\n    if not result:\n        result = app.acquire_token_for_client(scopes=scope)\n    access_token = result['access_token']\n\n    body = {\n        \"datasets\": [{\"id\": dataset_id}],\n        \"reports\": [{\"id\": report_id}],\n        \"targetWorkspaces\": [{\"id\": workspace_id}]\n    }\n    r = requests.post(\n        \"https://api.powerbi.com/v1.0/myorg/GenerateToken\",\n        headers={\"Authorization\": f\"Bearer {access_token}\"},\n        json=body\n    )\n    return r.json()['token']\n</code></pre>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#4-frontend-embed","title":"4. Frontend: Embed","text":"<pre><code>import * as powerbi from 'powerbi-client';\n\nconst models = powerbi.models;\n\nfunction embedReport(container: HTMLElement, embedConfig: { id: string; embedUrl: string; token: string; site: string; }) {\n  const config: powerbi.IEmbedConfiguration = {\n    type: 'report',\n    id: embedConfig.id,\n    embedUrl: embedConfig.embedUrl,\n    accessToken: embedConfig.token,\n    tokenType: models.TokenType.Embed,\n    settings: { panes: { filters: { visible: false } } }\n  };\n  const report = powerbi.embed(container, config) as powerbi.Report;\n  // Apply site filter from contextual data\n  report.on('loaded', async () =&gt; {\n    await report.setFilters([\n      {\n        $schema: 'http://powerbi.com/product/schema#basic',\n        target: { table: 'SiteFilter', column: 'Site' },\n        operator: 'In',\n        values: [embedConfig.site]\n      }\n    ]);\n  });\n}\n</code></pre>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#5-security-layers","title":"5. Security Layers","text":"Layer Control Purpose AAD App App roles / scopes Restrict who can call token endpoint Backend Tenant/site validation Prevent arbitrary site injection Power BI RLS roles Enforce data slice per user/tenant Dataset Parameterization Ensure minimal data exposure","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#example-rls-role-site-isolation","title":"Example RLS Role (Site Isolation)","text":"<p>In Power BI Desktop &gt; Modeling &gt; Manage Roles: <pre><code>[Site] = USERPRINCIPALNAME()\\\"s site mapping OR LOOKUPVALUE(SiteMap[Site], SiteMap[UserPrincipalName], USERPRINCIPALNAME())\n</code></pre> (Alternatively pass site via embed token identities.)</p>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#6-caching-performance","title":"6. Caching &amp; Performance","text":"Layer Strategy Notes Power BI Aggregations Combine DirectQuery (hot) + Import (warm) Power BI Incremental refresh Partition large historical tables ADX Materialized views Pre-aggregate heavy metrics Web-App Embed lifecycle Reuse report instance across tabs, avoid reloading","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#measuring","title":"Measuring","text":"<p>Use Performance Analyzer in Power BI Desktop and <code>QueryTrace</code> in ADX.</p>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#7-observability","title":"7. Observability","text":"<ul> <li>Log token requests (timestamp, workspace, dataset, site, user/tenant)</li> <li>Alert on unusual volume or failed token generation</li> <li>Track report load times (frontend performance marks)</li> </ul>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#8-checklist","title":"8. Checklist","text":"<ul> <li> Service principal least-privilege</li> <li> Embed token TTL minimal (e.g. 1h)</li> <li> RLS validated per tenant</li> <li> Site filter applied programmatically</li> <li> No hard-coded secrets in frontend</li> </ul>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-embedding/#9-related","title":"9. Related","text":"<ul> <li>Parameters &amp; Reuse</li> <li>ADX Functions &amp; Performance</li> </ul>","tags":["power-bi","embedding","security","web-app"]},{"location":"tutorials/web-app/power-bi-parameters/","title":"Power BI Parameters &amp; Reuse","text":"<p>Parametrization lets you deploy the same <code>.pbix</code> to multiple tenants, sites, or time scopes without cloning logic. It also reduces dataset size by pushing filters down into ADX.</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#1-parameter-strategy","title":"1. Parameter Strategy","text":"Parameter Purpose Source Example Site Scope data to a factory/site Web-app context / user claims <code>Lyon_01</code> TimeWindowHours Rolling horizon UI control (slider) <code>12</code> Product Optional product filter Slicer <code>Pilsner</code> RefreshMode Switch raw vs aggregated Hidden toggle <code>\"auto\"</code> / <code>\"historical\"</code> <p>Keep parameters minimal; prefer enumerations (domains) when possible for caching efficiency.</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#2-creating-parameters-in-power-bi-desktop","title":"2. Creating Parameters in Power BI Desktop","text":"<ol> <li>Transform Data &gt; Manage Parameters &gt; New</li> <li>Name: <code>Site</code>; Type: Text; Suggested Values: List (optional)</li> <li>Default Value: <code>Lyon_01</code>; Current Value: <code>Lyon_01</code></li> <li>Repeat for others.</li> </ol> <p>Tip: Use Text/Number/TrueFalse types\u2014avoid DateTime parameters if you can compute datetimes inside the query from <code>now()</code> plus duration.</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#3-using-parameters-in-kusto-m-query","title":"3. Using Parameters in Kusto M Query","text":"<pre><code>let\n    Site = Text.From(Parameter_Site),\n    Hours = Number.ToText(Parameter_TimeWindowHours),\n    Product = Text.From(Parameter_Product),\n    Cluster = Parameter_ADXCluster,\n    Database = Parameter_ADXDatabase,\n    Query =\n        \"Dashboard_Fact(datetime(\" &amp; DateTimeZone.ToText(DateTimeZone.UtcNow() - #duration(0, Number.From(Hours),0,0), \"yyyy-MM-dd HH:mm:ss\") &amp; \"), datetime(\" &amp; DateTimeZone.ToText(DateTimeZone.UtcNow(), \"yyyy-MM-dd HH:mm:ss\") &amp; \"), '\" &amp; Site &amp; \"', '\" &amp; Product &amp; \"')\"\n,\n    Source = Kusto.Contents(Cluster, Database, Query)\nin\n    Source\n</code></pre> <p>Abstract cluster &amp; database into parameters too for full reuse.</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#4-dynamic-binding-from-web-app","title":"4. Dynamic Binding from Web-App","text":"<p>When embedding, you can set report-level filters or parameter values via the JavaScript SDK.</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#option-a-embedding-slicers","title":"Option A: Embedding + Slicers","text":"<p>Populate hidden slicer tables with a single value coming from the web-app.</p> <pre><code>const site = appContext.site; // e.g. from JWT\nreport.setFilters([\n  {\n    $schema: \"http://powerbi.com/product/schema#basic\",\n    target: { table: \"SiteFilter\", column: \"Site\" },\n    operator: \"In\",\n    values: [site]\n  }\n]);\n</code></pre>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#option-b-query-parameters-through-directquery-preview-dependent","title":"Option B: Query Parameters Through DirectQuery (Preview-dependent)","text":"<p>If using DirectQuery, you can rewrite queries to reference a single-row parameter table that the app updates via Push API.</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#5-dataset-slimming","title":"5. Dataset Slimming","text":"Technique Effect Notes Parameter pushdown Smaller scans Express all filters as function parameters Summarize in ADX Less row transfer Provide aggregated KPIs, not raw events Remove unused columns Better compression Audit visuals &amp; fields list Incremental refresh Faster partition processing Combine with time parameters","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#6-testing-reusability","title":"6. Testing Reusability","text":"<p>Create a matrix of environment x site values and script automated validation:</p> <pre><code>for site in Lyon_01 Berlin_02; do\n  pbicli reports export --report \"BrewDashboard\" --workspace $WS --file export-$site.pbix \\\n    --parameter Site=$site || exit 1\n  echo \"Validated $site\"\ndone\n</code></pre>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#7-checklist","title":"7. Checklist","text":"<ul> <li> All Power BI queries reference a single root ADX serving function</li> <li> Parameters documented &amp; minimal</li> <li> No visual applies redundant filters already in function</li> <li> Dataset size &lt; target (e.g. 100 MB) / row count limited</li> <li> Test matrix executed for each release</li> </ul>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi-parameters/#8-next","title":"8. Next","text":"<p>Proceed to embedding details &amp; security considerations.</p> <p>See: Embedding &amp; Security</p>","tags":["power-bi","parameters","reuse","performance"]},{"location":"tutorials/web-app/power-bi/","title":"Power BI Overview","text":"<p>This section introduces how Power BI integrates with the solution for interactive analytics.</p>","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#1-objectives","title":"1. Objectives","text":"<ul> <li>Reuse the same report across environments &amp; sites</li> <li>Keep dashboards performant (&lt; 5s load for key visuals)</li> <li>Enforce data security &amp; isolation</li> </ul>","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#2-architecture-snapshot","title":"2. Architecture Snapshot","text":"<pre><code>ADX (Functions) -&gt; Power BI Dataset -&gt; Report -&gt; Embedded in Web-App\n</code></pre>","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#3-key-building-blocks","title":"3. Key Building Blocks","text":"Component Description Reference Parameterized Functions Source for DirectQuery / Import ADX Functions &amp; Performance Power BI Parameters Filter scoping &amp; reuse Parameters &amp; Reuse Embed Token Service Secure report embedding Embedding &amp; Security RLS Roles Tenant / site isolation Embedding &amp; Security","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#4-quick-start-checklist","title":"4. Quick Start Checklist","text":"<ul> <li> Create ADX serving function <code>Dashboard_Fact</code> with parameters</li> <li> Define Power BI parameters (Site, TimeWindowHours, Product)</li> <li> Build visuals from parameterized query</li> <li> Implement embed token backend endpoint</li> <li> Add site filter application on load</li> <li> Validate RLS &amp; parameter variations</li> </ul>","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#5-subpages","title":"5. Subpages","text":"<ul> <li>Parameters &amp; Reuse</li> <li>Embedding &amp; Security</li> </ul>","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#6-performance-tips-preview","title":"6. Performance Tips (Preview)","text":"Issue Mitigation Slow initial load Pre-warm dataset via REST refresh Heavy visuals Aggregate in ADX function Data bloat Remove unused columns &amp; tables","tags":["power-bi","web-app"]},{"location":"tutorials/web-app/power-bi/#7-next-steps","title":"7. Next Steps","text":"<p>Proceed to parameters for full reuse across sites.</p> <p>See: Parameters &amp; Reuse</p>","tags":["power-bi","web-app"]}]}